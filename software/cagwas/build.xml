<!--L
  Copyright SAIC.

  Distributed under the OSI-approved BSD 3-Clause License.
  See http://ncip.github.com/cagwas/LICENSE.txt for details.
L-->

<project name="cagwas" default="build-all" basedir=".">
	<description>
        Build and deploy the caGWAS portal
    </description>
	<!-- set global properties for this build -->
	<property name="PROP.FILE" location="build.properties" />
	<property name="MAILZIP.FILE" location="mailzip.properties" />
	<property file="${PROP.FILE}" />
	<property file="${MAILZIP.FILE}" />
	<echo>
        PROP.FILE = ${PROP.FILE}
    	MAILZIP.FILE = ${MAILZIP.FILE}
        DEPLOY.LOCATION = ${DEPLOY.LOCATION}
        JBOSS.HOME.DIR = ${JBOSS.HOME.DIR}
        JBOSS.SERVER.DIR = ${JBOSS.SERVER.NAME}
        JBOSS.CONF.DIR = ${JBOSS.CONF.DIR}
        JBOSS.DEPLOY.DIR = ${JBOSS.DEPLOY.DIR}
    	JBOSS.LIB.DIR = ${JBOSS.LIB.DIR}
    	DB.TYPE = ${db.type} 
    	EXTERNAL.CONFIG.DIR = ${EXTERNAL.CONFIG.DIR}
    </echo>
	<condition property="check.props">
		<and>
			<isset property="JBOSS.HOME.DIR" />
			<isset property="JBOSS.SERVER.NAME" />
			<isset property="JBOSS.CONF.DIR" />
			<isset property="JBOSS.DEPLOY.DIR" />
			<isset property="JBOSS.LIB.DIR" />
			<isset property="db.type" />
			<isset property="EXTERNAL.CONFIG.DIR" />
		</and>
	</condition>

	<condition property="remote.deploy">
		<equals arg1="${DEPLOY.LOCATION}" arg2="remote" />
	</condition>


	<!--
	TARGET: build_war
	Will compile the java code and build the war file
	-->
	<property name="src" value="./src" />
	<property name="lib" value="./WebRoot/WEB-INF/lib" />
	<property name="classes" value="./WebRoot/WEB-INF/classes" />
	<property name="cagwas.jndi.connection" value="cagwas-app" />
	<property name="csm.jndi.connection" value="cagwas" />

	<!-- Class to  run for the framework integration tests -->
	<property name="test.class.name" value="gov.nih.nci.cagwas.test.integration.CagwasIntegrationTestSuite" />

	<!-- Class to  run for the selenium integration tests -->
	<property name="test-selenium.class.name" value="gov.nih.nci.cagwas.test.integration.CagwasUIIntegrationTest" />

	<!-- Classpath to run the junit tests -->
	<path id="test.classpath">
		<pathelement location="${build.classes.dir}" />
		<pathelement location="${lib}/junit-3.8.1.jar" />
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${not.deployed.jarFiles}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${dependency.artifacts.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- Runs the selenium tests -->
	<target name="run_test" description="Start Selenmium Server ; Run JUnit Tests ; Stop Selenium Server">
		<parallel>
			<antcall target="start-server">
			</antcall>
			<sequential>
				<echo taskname="waitfor" message="Wait selenium server to launch" />
				<waitfor maxwait="2" maxwaitunit="minute" checkevery="100">
					<http url="http://localhost:4446/selenium-server/driver/?cmd=testComplete" />
				</waitfor>
				<antcall target="test-selenium">
				</antcall>
				<antcall target="stop-server">
				</antcall>
			</sequential>
		</parallel>
	</target>

	<!-- Starts the selenium server in the background to run the tests against -->
	<target name="start-server" depends="stop-server">
		<parallel>
			<java jar="${lib}/selenium-server.jar" spawn="yes" fork="true">
				<arg line="-port 4446" />
			</java>
		</parallel>
	</target>

	<!-- stops the selenuim server -->
	<target name="stop-server">
		<get taskname="selenium-shutdown" src="http://localhost:4446/selenium-server/driver/?cmd=shutDown" dest="result.txt" ignoreerrors="true" />
		<echo taskname="selenium-shutdown" message="DGF Errors during shutdown are expected" />
	</target>

	<!-- Runs the framework integration tests -->
	<target name="test-framework" depends="compile">
		<junit fork="yes" haltonfailure="yes">
			<test name="${test.class.name}" />
			<formatter type="plain" usefile="false" />
			<classpath refid="test.classpath" />
		</junit>
	</target>

	<!-- Runs the selenium integration tests -->
	<target name="test-selenium" depends="compile">
		<junit fork="yes" haltonfailure="yes">
			<test name="${test-selenium.class.name}" />
			<formatter type="plain" usefile="false" />
			<classpath refid="test.classpath" />
		</junit>
	</target>

	<target name="compile">
		<javac srcdir="${build.source.dir}" destdir="${build.classes.dir}" source="1.5" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${webapp.lib.dir}">
					<include name="*.jar" />
				</fileset>

				<fileset dir="${not.deployed.jarFiles}">
					<include name="*.jar" />
				</fileset>

				<fileset dir="${dependency.artifacts.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<target name="build-all" depends="init, clean, -filter">
		<delete dir="${build.classes.dir}" failonerror="false" />
		<delete file="${module_name}.war" failonerror="false" />
		<delete file="${webapp.classes.dir}/cagwasResources.properties" failonerror="false" />
		<mkdir dir="${build.classes.dir}" />
		<javac srcdir="${build.source.dir}" destdir="${build.classes.dir}" source="1.5" debug="true" excludes="**/test/**" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${webapp.lib.dir}">
					<include name="*.jar" />
				</fileset>

				<fileset dir="${not.deployed.jarFiles}">
					<include name="*.jar" />
				</fileset>

				<fileset dir="${dependency.artifacts.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
		<copy todir="${webapp.classes.dir}">
			<fileset dir="${build.classes.dir}">
				<include name="**/*.class" />
			</fileset>
		</copy>
		<copy todir="${webapp.classes.dir}">
			<fileset dir="${build.source.dir}">
				<include name="**/*.properties" />
				<include name="cagwasResources.properties" />
				<include name="cagwas-domain-hibernate.cfg.xml" />
				<include name="${module_name}.csm.new.hibernate.cfg.xml" />
				<exclude name="zip.properties" />
				<exclude name="mail.properties" />
			</fileset>
		</copy>
		<war destfile="${module_name}.war" webxml="${webapp.dir}/WEB-INF/web.xml">
			<fileset dir="${webapp.dir}">
				<exclude name="${webapp.lib.dir}/log4*.jar" />
			</fileset>
			<zipfileset dir="${dependency.artifacts.dir}" prefix="WEB-INF/lib">
				<include name="caintegrator-analysis-commons.jar" />
				<include name="caintegrator-application-commons.jar" />
				<include name="caintegrator-spec.jar" />
			</zipfileset>
		</war>
		<copy todir="${artifacts.dir}" file="${module_name}.war" />
	</target>

	<!--
	TARGET: deploy
	simply copies the war file to the jboss deployment directory
	-->
	<target name="-filter" depends="configure.database.type.asMySQL, configure.database.type.asOracle,configure.resources.asCGEMS">
		<!-- filtering properties -->
		<echo>properties ...
		project_name = ${project_name}
		project_title = ${project_title}
		</echo>
		<filter token="project_name" value="${project_name}" />
		<filter token="project_title" value="${project_title}" />
		<mkdir dir="./artifacts.dir">
		</mkdir>
		<delete>
			<fileset file="./WebRoot/WEB-INF/tiles-defs.xml" />
			<fileset file="${src}/cagwas-domain-hibernate.cfg.xml" />
		</delete>
		<echo message="Configuring cagwas-domain-hibernate-cfg.xml" />
		<copy file="conf/cagwas-domain-hibernate.cfg.xml.template" toFile="${src}/cagwas-domain-hibernate.cfg.xml" filtering="true">
			<filterset begintoken="@" endtoken="@">
				<filter token="MODULE_NAME" value="${module_name}" />
				<filter token="DB_JNDI_CONNECTION" value="${cagwas.jndi.connection}" />
				<filter token="DB_DIALECT" value="${DB_DIALECT}" />
			</filterset>
		</copy>
		<!-- Configuring cagwas.csm.new.hibernate.cfg.xml -->
		<echo message="Setting cagwas.hibernate.cfg.xml" />
		<delete file="${src}/${module_name}.csm.new.hibernate.cfg.xml" />
		<copy file="conf/csm/csm.new.hibernate.cfg.xml.template" tofile="${src}/${module_name}.csm.new.hibernate.cfg.xml" >
				<filterset begintoken="@" endtoken="@">
				<filter token="DB_JNDI_CONNECTION" value="${csm.jndi.connection}" />
				<filter token="DB_DIALECT" value="${DB_DIALECT}" />
			</filterset>
		</copy>
		<copy tofile="./WebRoot/WEB-INF/tiles-defs.xml" filtering="true">
			<fileset file="conf/tiles-defs.template.xml" />
		</copy>


	</target>
	<target name="deploy" depends="deploy_artifacts,appendPropertyService,appendLoginConfig">
		<copy file="${artifacts.dir}/${module_name}.war" todir="${JBOSS.DEPLOY.DIR}" />
		<copy file="${artifacts.dir}/zip.properties" todir="${EXTERNAL.CONFIG.DIR}"/>
		<copy file="${artifacts.dir}/mail.properties" todir="${EXTERNAL.CONFIG.DIR}"/>
     	<copy file="${artifacts.dir}/${module_name}-csm-ds.xml" todir="${JBOSS.DEPLOY.DIR}"/>
		<copy file="${artifacts.dir}/${module_name}-ds.xml" todir="${JBOSS.DEPLOY.DIR}"/>
	</target>

	<!--
	TARGET: deploy_artifacts
	Copies the configuration files to the deployment-artifacts directory
    -->
	<target name="deploy_artifacts" depends="configure.data.source,configure_cagwas-properties-service,config_common_security_module">
		<copy file="${module_name}.war" todir="${artifacts.dir}" />
		<echo>filter mail and zip properties ...</echo>
		<copy file="conf/zip.properties.template" toFile="${artifacts.dir}/zip.properties" filtering="true">
			<filterset begintoken="@" endtoken="@">
				<filtersfile file="${MAILZIP.FILE}" />
			</filterset>
		</copy>
		<copy file="conf/mail.properties.template" toFile="${artifacts.dir}/mail.properties" filtering="true">
			<filterset begintoken="@" endtoken="@">
				<filtersfile file="${MAILZIP.FILE}" />
			</filterset>
		</copy>
		<copy file="${artifacts.dir}/properties-service.xml" todir="${artifacts.dir}" />
	</target>

	
		<!--checks if login-config.xml exists-->	
		<target name="login_check">
						<property name="login.xml" value="${JBOSS.CONF.DIR}/login-config.xml"/>
						<available file="${login.xml}" property="login.xml.present"/>
						<condition property="login.xml.not.present">
							<not>
								<istrue value="${login.xml.present}"/>
							</not>
						</condition>			
		</target>
	
		<!--checks if its a cgems build exists-->	
		<target name="check.war.type" description="check if this is a cgems build or a cagwas build">
			<delete>
				<fileset file="${build.source.dir}/cagwasResources.properties" />
			</delete>
			<copy tofile="${build.source.dir}/cagwasResources.properties">
				<fileset file="${build.conf.dir}/cagwasResources.properties" />
			</copy>
			<condition property="isCGEMS">
				<matches pattern="cgems" string="${module_name}" />
			</condition>
			<echo> isCGEMS="${isCGEMS}" </echo>
		</target>
	
		<target name="configure.resources.asCGEMS" depends="configure.header.jsp.asCGEMS,configure.header.jsp.asCAGWAS,check.war.type" if="isCGEMS" description="configure the war file for CGEMS">
			<echo message="Configuring configure.resources.asCGEMS" />
			<replaceregexp file="${build.source.dir}/cagwasResources.properties" match="caGWAS" replace="CGEMS" flags="g" />
			<replaceregexp file="${build.source.dir}/cagwasResources.properties" match="cagwas" replace="cgems" flags="g" />
			<replaceregexp file="${build.source.dir}/cagwasResources.properties" match="Study1" replace="Prostate" flags="g" />
			<replaceregexp file="${build.source.dir}/cagwasResources.properties" match="Study2" replace="Breast" flags="g" />
			<replaceregexp file="${build.source.dir}/cagwasResources.properties" match="Study3" replace="Pancreatic" flags="g" />
			<replaceregexp file="${build.source.dir}/cagwasResources.properties" match="Study4" replace="Lung" flags="g" />
		</target>
	
	<!-- modify header.jsp in tiles-def.xml for cgems-->
	<target name="configure.header.jsp.asCGEMS" depends="check.war.type" if="isCGEMS" description="configure the header.jsp in tiles-def.xml for CGEMS">
				<echo message="Configuring configure.header.jsp.asCGEMS" />
				<delete>
					<fileset file="./WebRoot/WEB-INF/jsp/header.jsp" />
				</delete>
				<copy tofile="./WebRoot/WEB-INF/jsp/header.jsp">
					<fileset file="./WebRoot/WEB-INF/jsp/header_cgems.jsp" />
				</copy>
			</target>
	<target name="configure.header.jsp.asCAGWAS" depends="check.war.type" unless="isCGEMS" description="configure the header.jsp in tiles-def.xml for caGWAS">
				<echo message="Configuring configure.header.jsp.asCAGWAS" />
				<delete>
					<fileset file="./WebRoot/WEB-INF/jsp/header.jsp" />
				</delete>
				<copy tofile="./WebRoot/WEB-INF/jsp/header.jsp">
					<fileset file="./WebRoot/WEB-INF/jsp/header_cagwas.jsp" />
				</copy>
			</target>
	
		<!--adds login-config.xml if it does not already exist-->
		<target name="addLoginConfig" if="login.xml.not.present" depends="login_check,appendLoginConfig">
			<echo message="No login-config file exists, copy over from csmdeploy dir"/>		
			<copy file="csm_deploy/login-config.xml" todir="${JBOSS.CONF.DIR}"/>		
		</target>
		
		<!--appends section to login-config.xml if it does already exist-->
		<target name="appendLoginConfig" if="login.xml.present" depends="login_check">
			<echo message="There is a login-config.xml present, copy and paste needed sections"/>				
			<taskdef name="xmltask" classpath="${not.deployed.jarFiles}/xmltask-v1.15.1.jar" classname="com.oopsconsultancy.xmltask.ant.XmlTask"/>			
				<!--copy and insert new login configs to jboss file-->
		  		<xmltask source="${artifacts.dir}/login-config.xml" clearBuffers="loginBuffer">
		  			<copy path="//application-policy[1]" buffer="loginBufer" append="false"/>  			
		  		</xmltask>	
				<xmltask source="${JBOSS.CONF.DIR}/login-config.xml" dest="${JBOSS.CONF.DIR}/login-config.xml">
					<remove path="//application-policy[@name='${module_name}']"/>
				 	<insert path="//application-policy[1]" buffer="loginBufer" position="after" /> 				
				</xmltask>			
		</target>
	
	<!--appends section to properties-service.xml -->
		<target name="appendPropertyService">
				<echo message="Copy and paste needed sections to properties-service in JBOSS"/>					
				<taskdef name="xmltask" classpath="${not.deployed.jarFiles}/xmltask-v1.15.1.jar" classname="com.oopsconsultancy.xmltask.ant.XmlTask"/>		
					<!--copy and insert new property to jboss file-->
					<xmltask source="${artifacts.dir}/properties-service.xml" clearBuffers="psBuffer">
					  			<copy path="//attribute" buffer="psBuffer" append="false"/>  			
					</xmltask>
					<xmltask source="${JBOSS.DEPLOY.DIR}/properties-service.xml" dest="${JBOSS.DEPLOY.DIR}/properties-service.xml">
						<!-- <remove path="//attribute[@name='Properties']/text()='gov.nih.nci.cagwas.zip.properties=C:/local/content/cagwas/config/zip.properties'"  />-->
						<insert path="//mbean[2]" buffer="psBuffer"/>
					</xmltask>
		</target>

	<!--
	TARGET: config_common_security_module
	Configures the common security module creating the necessary files
	for Authentication 
	-->
	<target name="config_common_security_module" depends="configure.database.type.asMySQL, configure.database.type.asOracle,configure.login-config.asDB,configure.login-config.asLDAP">
		<echo message="Configuring Common Security Module" />
		<!-- Configures CSM Data Source for mySQL or Oracle -->
		<delete file="${artifacts.dir}/${module_name}-csm-ds.xml" />
		<copy file="conf/ds.xml.template" tofile="${artifacts.dir}/${module_name}-csm-ds.xml">
				<filterset begintoken="@" endtoken="@">
					<filter token="DB_TYPE" value="${DB_TYPE}" />
					<filter token="DB_SCHEMA_SEPERATOR" value="${DB_SCHEMA_SEPERATOR}" />
					<filter token="DB_JNDI_CONNECTION" value="${csm.jndi.connection}" />
					<filter token="DB_URL" value="${csm.databaseServerURL}" />
					<filter token="DB_PORT" value="${csm.databaseServerPort}" />
					<filter token="DB_SCHEMA_NAME" value="${csm.databaseSchemaName}" />
					<filter token="DB_DIALECT" value="${DB_DIALECT}" />
					<filter token="DB_CONNECTION_URL" value="${csm.urlDbalias}" />
					<filter token="DB_USERNAME" value="${csm.databaseUser}" />
					<filter token="DB_PASSWORD" value="${csm.databasePassword}" />
					<filter token="DB_DRIVER_CLASS" value="${DB_DRIVER_CLASS}" />
					<filter token="DB_EXCEPTION_SORTER_CLASS" value="${DB_EXCEPTION_SORTER_CLASS}" />
				</filterset>
		</copy>
	</target>
	<!-- configure login-config type -->
	<target name="configure.login-config.asDB" depends="check.csm.authentication.type,configure.database.type.asMySQL, configure.database.type.asOracle" if="isCSM_DB" description="configure the login-config for DB">
		<echo message="Configuring configure.login-config.asDB" />
		<delete file="${artifacts.dir}/login-config.xml" />
		<copy file="conf/csm/db.login-config.xml.template" tofile="${artifacts.dir}/login-config.xml" >
				<filterset begintoken="@" endtoken="@">
					<filter token="MODULE_NAME" value="${module_name}" />
					<filter token="DB_SCHEMA_SEPERATOR" value="${DB_SCHEMA_SEPERATOR}" />
					<filter token="DB_TYPE" value="${DB_TYPE}" />
					<filter token="DB_URL" value="${csm.databaseServerURL}" />
					<filter token="DB_PORT" value="${csm.databaseServerPort}" />
					<filter token="DB_SCHEMA_NAME" value="${csm.databaseSchemaName}" />
					<filter token="DB_USERNAME" value="${csm.databaseUser}" />
					<filter token="DB_PASSWORD" value="${csm.databasePassword}" />
					<filter token="DB_DRIVER_CLASS" value="${DB_DRIVER_CLASS}" />					
				</filterset>
		</copy>	
	</target>
	<target name="configure.login-config.asLDAP" depends="check.csm.authentication.type" unless="isCSM_DB" description="configure the login-config for LDAP">
		<echo message="Configuring configure.login-config.asLDAP" />
		<delete file="${artifacts.dir}/login-config.xml" />
		<copy file="conf/csm/ldap.login-config.xml.template" tofile="${artifacts.dir}/login-config.xml" />
		<replaceregexp file="${artifacts.dir}/login-config.xml" match="@MODULE_NAME@" replace="${module_name}" flags="g" />
		<replaceregexp file="${artifacts.dir}/login-config.xml" match="@LDAP_HOST@" replace="${ldap.provider.url}" flags="g" />
		<replaceregexp file="${artifacts.dir}/login-config.xml" match="@LDAP_CONTEXT@" replace="${ldap.context}" flags="g" />
	</target>

	<target name="configure_cagwas-properties-service">
		<!-- Configuring cagwas-properties-service.xml -->
		<echo message="Configuring properties-service.xml" />
		<delete file="${artifacts.dir}/properties-service.xml" />
		<copy file="conf/caintegrator-properties-service.xml" tofile="${artifacts.dir}/properties-service.xml" />
		<replaceregexp file="${artifacts.dir}/properties-service.xml" match="@EXTERNAL.CONFIG.DIR@" replace="${EXTERNAL.CONFIG.DIR}" flags="g" />
	</target>

	<target name="build_strutstest" depends="build-all">
		<javac srcdir="${build.source.dir}" destdir="${build.classes.dir}" source="1.5" excludes="**/CagwasIntegrationTestSuite.java" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${webapp.lib.dir}">
					<include name="*.jar" />
				</fileset>

				<fileset dir="${not.deployed.jarFiles}">
					<include name="*.jar" />
				</fileset>

				<fileset dir="${dependency.artifacts.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
		<copy todir="${build.classes.dir}" file="${build.source.dir}/cagwas-domain-hibernate.cfg.xml" />
		<copy todir="${webapp.dir}/WEB-INF/test">
			<fileset dir="${basedir}/test">
				<include name="applicationContext*.xml" />
			</fileset>
		</copy>
	</target>

	<target name="run_strutstest" depends="build_strutstest">
		<junit fork="yes" haltonfailure="yes">
			<test name="gov.nih.nci.cagwas.web.test.AllActionTests" />
			<formatter type="plain" usefile="false" />
			<classpath>
				<pathelement path="${build.classes.dir}" />
				<pathelement path="${webapp.dir}" />
				<fileset dir="${webapp.lib.dir}">
					<include name="*.jar" />
				</fileset>

				<fileset dir="${not.deployed.jarFiles}">
					<include name="*.jar" />
				</fileset>

				<fileset dir="${dependency.artifacts.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</junit>
	</target>
	<!-- Clean up -->
	<target name="clean">
		<delete dir="${build.classes.dir}" failonerror="false" />
		<delete dir="${javadoc.dir}" failonerror="false" />
		<delete dir="${artifacts.dir}" failonerror="false" />
		<mkdir dir="${artifacts.dir}" />
	</target>

	<!-- Generate Javadoc documentation -->
	<target name="javadoc">
		<echo>Creating javadoc directory</echo>
		<mkdir dir="${javadoc.dir}" />

		<echo>Generating documentation</echo>
		<javadoc sourcepath="${build.source.dir}" packagenames="gov.nih.nci.cagwas.*" destdir="${javadoc.dir}" excludepackagenames="**/web/test" Windowtitle="${project_title}" Header="${project_title}" />
	</target>
	<!-- Validation -->
	<target name="check.ant.version" description="Ensure that we're running ant 1.7">
		<fail message="Please install using ant 1.7">
			<condition>
				<not>
					<contains string="${ant.version}" substring="1.7" />
				</not>
			</condition>
		</fail>
	</target>
	<!-- check CSM authentication type -->
	<target name="check.csm.authentication.type" description="check if we are using ldap or db CSM authentication">
		<condition property="isCSM_DB">
			<matches pattern="db" string="${csm.authentication.type}" />
		</condition>
		<condition property="isCSM_LDAP">
			<matches pattern="ldap" string="${csm.authentication.type}" />
		</condition>
		<echo> isCSM_DB="${isCSM_DB}" </echo>
		<echo> isCSM_LDAP="${isCSM_LDAP}" </echo>
	</target>
	<!-- check DB type -->
	<target name="check.database.type" description="check if we are build for Oracle or mySQL">
		<condition property="isMySQL">
			<matches pattern="mysql" string="${db.type}" />
		</condition>
		<condition property="isOracle">
			<matches pattern="oracle" string="${db.type}" />
		</condition>
		<echo> isMySQL="${isMySQL}" </echo>
		<echo> isOracle="${isOracle}" </echo>
	</target>
	<!-- configure DB type -->
	<target name="configure.database.type.asMySQL" depends="check.database.type" if="isMySQL" description="configure the build for MySQL">
		<echo message="Configures Data Source as mySQL" />
		<property name="DB_DIALECT" value="${db.dialect.mysql}" />
		<property name="DB_DRIVER_CLASS" value="${db.jdbcRuntimeDriver.mysql}" />
		<property name="DB_EXCEPTION_SORTER_CLASS" value="${db.exception.sorter.class.mysql}" />
		<property name="DB_TYPE" value="${db.type}://"/>
		<property name="DB_SCHEMA_SEPERATOR" value="/"/>

	</target>
	<target name="configure.database.type.asOracle" depends="check.database.type" unless="isMySQL" description="configure the build for Oracle">
		<echo message="Configures Data Source as Oracle" />
		<property name="DB_DIALECT" value="${db.dialect.oracle}" />
		<property name="DB_DRIVER_CLASS" value="${db.jdbcRuntimeDriver.oracle}" />
		<property name="DB_EXCEPTION_SORTER_CLASS" value="${db.exception.sorter.class.oracle}" />
		<property name="DB_TYPE" value="${db.type}:thin:@"/>
		<property name="DB_SCHEMA_SEPERATOR" value=":"/>
	</target>

	<!-- Configures App Data Source -->
	<target name="configure.data.source" depends="configure.database.type.asMySQL, configure.database.type.asOracle" description="Configures Data Source for mySQL or Oracle">
		<delete file="${artifacts.dir}/${module_name}-ds.xml" />
		<copy file="conf/ds.xml.template" tofile="${artifacts.dir}/${module_name}-ds.xml">
			<filterset begintoken="@" endtoken="@">
				<filter token="DB_TYPE" value="${DB_TYPE}" />
				<filter token="DB_SCHEMA_SEPERATOR" value="${DB_SCHEMA_SEPERATOR}" />
				<filter token="DB_JNDI_CONNECTION" value="${cagwas.jndi.connection}" />
				<filter token="DB_URL" value="${cagwas.databaseServerURL}" />
				<filter token="DB_PORT" value="${cagwas.databaseServerPort}" />
				<filter token="DB_SCHEMA_NAME" value="${cagwas.databaseSchemaName}" />
				<filter token="DB_DIALECT" value="${DB_DIALECT}" />
				<filter token="DB_CONNECTION_URL" value="${cagwas.urlDbalias}" />
				<filter token="DB_USERNAME" value="${cagwas.databaseUser}" />
				<filter token="DB_PASSWORD" value="${cagwas.databasePassword}" />
				<filter token="DB_DRIVER_CLASS" value="${DB_DRIVER_CLASS}" />
				<filter token="DB_EXCEPTION_SORTER_CLASS" value="${DB_EXCEPTION_SORTER_CLASS}" />
				
			</filterset>
		</copy>
	</target>
	<target name="-prop-check" unless="check.props" description="Verifies the presence of all required properties.">
		<fail>Missing one or more properties, see template.build.properties for a complete list.</fail>
	</target>

	<target name="-init-check" if="check.props" description="Notify the user that all properties are present.">
		<echo>All properties are present.</echo>
	</target>

	<target name="init" depends="-prop-check,-init-check" description="The default target which only validates the presence of the script properties.">
		<!-- <fail>This build script must be run with the name of the desired target: build-all, build-product, clean, deploy, javadoc, package-download, test.</fail> -->
	</target>
</project>

<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: install.xml 4757 2008-05-15 20:43:31Z zengje $
$HeadURL: http://gforge.nci.nih.gov/svnroot/cagwas/trunk/software/install.xml $
-->
<project name="cagwas-installer" default="upgrade" basedir="." 
	xmlns:ivy="antlib:org.apache.ivy.ant"
	>
	<description>
		This build file is part of the bda-build-templates project. This is the master install file for the project.  It should be placed in project/software.  This script is copied into the distribution and  executed from the extracted distribution.  It is run by typing "ant" from the master project build.xml or from command line. This script has two flows install and upgrade.
		Install will do the following
 			* Install binaries
			* Configure binaries
			* Install application
			* Configure application
			* Re-create database
			* Upgrade database
		Upgrade will do the following
			* Install application
			* Configure application
			* Upgrade database
		The script includes target that may not be used by all projects, but are included in here becaue it is a template. This script has targets to deal with the following, you can delete targets you don't want to work with
		Application servers (option for grid services also)
			* JBoss
			* Tomcat
		Databases
			* MySQL
			* PostgreSQL
			* Oracle
		This script requires java and ant to run. Every thing else it needs is included in the distribution.
	</description>

	<!-- Properties file related properties and tasks -->
	<property environment="env" />
	<property file="local.properties"/>
	<property file="project.properties"/>
	<property name="properties.file" value="${basedir}/install.properties"/>
	<echo message="Using properties file of ${properties.file}."/>
	<available file="${properties.file}" property="properties.file.exists" />
	<fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail."/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
	<property file="${properties.file}" />
	<!-- Set application.base.path based on platform -->
	<condition property="application.base.path" value="${application.base.path.linux}">
		<or>
			<os family="unix" />
			<os family="mac" />
		</or>
	</condition>

	<condition property="application.base.path" value="${application.base.path.windows}">
		<os family="windows" />
	</condition>
	<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
	<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>

	<!--OS Temp dir -->
	<condition property="os.temp.dir" value="/tmp">
		<or>
			<os family="unix" />
			<os family="mac" />
		</or>
	</condition>

	<condition property="os.temp.dir" value="c:/temp">
		<os family="windows" />
	</condition>

	<!-- Generic properties -->
	<property name="log.dir" value="${basedir}/logs" />
	<property name="working.dir" value="${basedir}/working" />
	<property name="temp.dir" value="${working.dir}/temp" />


	<!-- Install Time properties -->
	<!-- Source and target directories -->
	<property name="bda-utils.dir" value="bda-utils" />
	<property name="tools.dir" value="${basedir}/${tools.dist.relative.dir}" />
	<property name="common.dir.src" value="${basedir}/${common.dist.relative.dir}" />
	<property name="grid.resource.dir" value="${basedir}/${grid.dist.relative.dir}" />
	<property name="grid.application.dir" value="${working.dir}/grid-application" />
	<property name="common.dir.dest" value="${working.dir}/${common.dist.relative.dir}" />
	<property name="db.dir.src" value="${basedir}/${db.dist.relative.dir}" />
	<property name="db.dir.dest" value="${working.dir}/${db.dist.relative.dir}" />
	<property name="db-install.dir.dest" value="${working.dir}/${db-install.dist.relative.dir}" />
	<property name="db-upgrade.dir.dest" value="${working.dir}/${db-upgrade.dist.relative.dir}" />
	<property name="jboss-conf.dir.dest" value="${working.dir}/${jboss-conf.dist.relative.dir}" />

	<!-- Jboss binding configurtion related properties -->
	<property name="jboss.binding.template.location" value="${bda-utils.dir}/resource/${jboss.template.relative.dir}/bindings.xml"/>
	<property name="jboss.service.template.location" value="${bda-utils.dir}/resource/${jboss.template.relative.dir}/jboss-service.xml"/>

	<!-- *-ds.xml and WAR -->
	<property name="cagwas.dir.dist" value="${basedir}/${cagwas.dist.relative.dir}" />
	<property name="cagwas.ds.file" value="cagwas-ds.xml" />
	<property name="cagwas-csm.ds.file" value="cagwas-csm-ds.xml" />
	<property name="cagwas.war.file" value="cagwas.war" />
	<property name="cgom-cagwas.war.file" value="cgom-cagwas.war" />

	<!-- Grid related properties -->
	<property name="grid.artifact.file" value="wsrf.war" />
	<property name="grid.dir.dest" value="wsrf.war" />
	<property name="grid.application.name" value="CAGWAS" />

	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- Task definitions -->
	<taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml">
		<classpath>
			<pathelement location="${bda-utils.dir}/antunit-1.0.jar" />
		</classpath>
	</taskdef>
	<taskdef name="xmlconfig" classname="com.xmlconfig.anttask.XmlConfig" classpathref="bda-utils.classpath" />
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask">
		<classpath>
			<pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar"/>
			<pathelement location="${bda-utils.dir}/bcel-5.1.jar"/>
			<pathelement location="${bda-utils.dir}/commons-httpclient-3.0.1.jar"/>
			<pathelement location="${bda-utils.dir}/commons-logging-1.0.4.jar"/>
			<pathelement location="${bda-utils.dir}/ivy-1.3.1.jar"/>
		</classpath>
	</taskdef>
	<taskdef resource="liquibasetasks.properties" classpathref="bda-utils.classpath"/>
	<taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="bda-utils.classpath"/>

	<!-- Conditionals -->
	<available file="${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml" property="jboss.exists"/>
	<!-- cagwas can use either Oracle or MySQL or PostgreSQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
	<switch value="${database.type}">
		<case value="oracle">
			<property name="database.dialect" value="org.hibernate.dialect.OracleDialect"/>
			<property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.3.0.jar"/>
			<property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
			<property name="db-upgrade.list.file" value="${db-upgrade.oracle.list.file}"/>
			<property name="db-upgrade.conf.file" value="${db-upgrade.oracle.conf.file}"/>
			<property name="database.schema" value="${database.name}"/>
		</case>
		<case value="mysql">
			<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect"/>
			<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.5.jar"/>
			<property name="database.driver" value="com.mysql.jdbc.Driver"/>
			<property name="db-upgrade.list.file" value="${db-upgrade.mysql.list.file}"/>
			<property name="db-upgrade.conf.file" value="${db-upgrade.mysql.conf.file}"/>
			<property name="database.schema" value="${database.name}"/>
		</case>
		<default>
			<fail message="Invalid database type ${database.type}"/>
		</default>
	</switch>

	<path id="jdbc.driver.classpath">
		<pathelement location="${database.driver.file}"/>
	</path>

	<!-- Includes-->
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<available file="${jboss.home}/server/${jboss.server.name}/deploy/${bda-blueprints-webapp.ds.file}" property="ds.exists"/>
	<if>
		<isset property="ds.exists"/>
		<then>
		</then>
		<else>
			<echo message="Warning- could not find ${jboss.home}/server/${jboss.server.name}/deploy/${bda-blueprints-webapp.ds.file}"/>
		</else>
	</if>

	<!-- figure out whether to use install-properties.template or upgrade-proprties.template based on the name of the properties file -->
	<propertyregex property="properties.file.type"
		input="${properties.file}"
		regexp=".*(install|upgrade).*"
		select="\1"     
		/>
	<echo message="Properties file type = ${properties.file.type}"/>
	<switch value="${properties.file.type}">
		<case value="install">
			<property name="properties.template.file" value="install-properties.template" />
		</case>
		<case value="upgrade">
			<property name="properties.template.file" value="upgrade-properties.template" />
		</case>
		<default>
			<fail message="Property file name must include 'install' or 'upgrade' so it can be determined which properties template should be used. If you are not certain include 'upgrade' in the name of your proeprties file."/>
		</default>
	</switch>

	<!-- Added to convert location to file and path -->
	<basename file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.file"/>
	<dirname file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.dir"/>
	<basename file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.file"/>
	<dirname file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.dir"/>
	<basename file="${grid.secure.cert.location}" property="grid.secure.cert.file"/>
	<dirname file="${grid.secure.cert.location}" property="grid.secure.dir"/>
	<basename file="${grid.secure.key.location}" property="grid.secure.key.file"/>

	<!-- Start logging --> 
	<property name="install-logs.dir" location="${application.base.path}/change-logs"/>
	<mkdir dir="${install-logs.dir}"/>
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${install-logs.dir}/install-${install.time}.log" action="start"/>

	<!-- Installer section -->
	<target name="diag">
		<echoproperties/>
	</target>

	<!-- Clean up destination directory -->
	<target name="install:clean" description="Removes all files from the local filesystem" depends="install:clean:jboss">
	</target>

	<target name="install:clean:jboss" unless="exclude.jboss">
		<sleep seconds="5" />
		<property name="backup.count" value="5"/>
		<if>
			<not>
				<equals arg1="${exclude.jboss.backup}" arg2="true"/>
			</not>
			<then>
				<!-- Jboss backup, do not compress until install is finished -->
				<property name="backup.jboss.base.dir" location="${application.base.path}/backup/jboss"/>

				<!-- So these directories won't be included in the backup, they are not needed to use jboss --> 
				<delete dir="${jboss.home}/server/${jboss.server.name}/work"/>
				<delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>

				<backup-dir
					src.dir="${jboss.home}"
					backup.base.dir="${backup.jboss.base.dir}"
					backup.count="${backup.count}"
					/>
			</then>
		</if>
		<delete dir="${jboss.home}"/>
	</target>

	<!-- Does directory management and copy some files with filtering to ensure token expansion -->
	<target name="install:init" description="Does directory management to initialize install">
		<filterset id="filterset.pre">
			<filter token="application.base.path" value="${application.base.path}"/>
			<filter token="application.url" value="${application.url}"/>
			<filter token="jboss.home" value="${jboss.home}"/>
			<filter token="database.url" value="${database.url}"/>
			<filter token="database.user" value="${database.user}"/>
			<filter token="database.password" value="${database.password}"/>
			<filter token="database.system.url" value="${database.system.url}"/>
			<!-- added internal properties that may be used in a filtered copy -->
			<filter token="database.driver" value="${database.driver}"/>
			<filter token="database.dialect" value="${database.dialect}"/>
			<!-- added for liquibase -->
			<filter token="db-upgrade.run.dir" value="${db-upgrade.dir.dest}/${database.type}"/>
		</filterset>
		<mkdir dir="${working.dir}" />
		<delete dir="${working.dir}"/>
		<mkdir dir="${working.dir}" />
		<mkdir dir="${resource.dir.temp}"/>
		<!-- Copy files to ensure values containing variables are expanded, such properties are stored in filterset.pre and then copy with filter files -->
		<copy todir="${common.dir.dest}" filtering="true">
			<fileset dir="${common.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="filterset.pre"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy> 
	</target>

	<!-- Wrapper install database target, depends on both MySQL and Oracle sub-targets, ifs should ensure only one is run.  Target path can be skipped by exlude.database also calls upgrade:database -->

	<target name="install:database:prep" description="Copies db files with filtering" unless="exclude.database" depends="install:init">
		<echoproperties prefix="database"/>
		<copy todir="${db.dir.dest}" filtering="true">
			<fileset dir="${db.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="filterset.pre"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>
		<mkdir dir="${os.temp.dir}/${project.name}"/>
		<copy todir="${os.temp.dir}/${project.name}" filtering="true" flatten="true" overwrite="true">
			<fileset dir="${db.dir.dest}">
				<include name="**/db-upgrade.xml"/>
			</fileset>
		</copy>

	</target>

	<target name="install:database" description="Runs datbase creation scripts then calls uprade database." unless="exclude.database"
		depends="
		install:init,
		install:database:prep
		">
		<!-- Drop all schema objects or re-create the db -->
		<database-clean/>
		<!-- Run baseline scripts stored in db.install.create.${database.type}.file.list variable -->
		<switch value="${database.type}">
			<case value="oracle">
				<database-install
					db.install.create.file.list="${db.install.create.oracle.file.list}"
					sql.delimiter="/"
					sql.delimitertype="row"
					/>
			</case>
			<case value="mysql">
				<database-install
					db.install.create.file.list="${db.install.create.mysql.file.list}"
					/>
			</case>
		</switch>
		<database-upgrade
			database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"
			/>
		<database-tag/>
	</target>

	<target name="install:jboss:binaries" description="Install JBoss binaries" unless="exclude.jboss">
		<!-- If you are using default jboss distribution, non-NCI -->
		<jboss-install-binaries
			/>
	</target>

	<target name="install:jboss:cagwas" description="Deploy cagwas and common libraries to jboss installation" unless="exclude.jboss">
		<!-- added to ensure working.dirs are fresh for our install -->
		<delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>
		<delete dir="${jboss.home}/server/${jboss.server.name}/work"/>

		<copy file="${cagwas.dir.dist}/${cagwas.war.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		<!--  Many NCI applications require clm for csm, so you can point this to where you have the version you want to use
		<copy file="${bda-utils.dir}/clm-3.2.jar" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
		-->
		<copy file="${database.driver.file}" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
	</target>

	<target name="install:jboss:cagwas:configure" description="Configure cagwas application, copies over externalized properties or configurations that are not part of the jboss configuration" unless="exclude.jboss">
		<copy file="${jboss-conf.dir.dest}/${cagwas.ds.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		<copy file="${jboss-conf.dir.dest}/${cagwas-csm.ds.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		
		<!-- Insert proeprties service xml stuff -->
		<copy todir="${jboss.home}/server/${jboss.server.name}/deploy" file="${jboss-conf.dir.dest}/properties-service.xml">
			<filterset>
				<filter token="jboss.home" value="${jboss.home}"/>
				<filter token="jboss.server.name" value="${jboss.server.name}"/>
			</filterset>
		</copy>
		<!-- -->
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(host)=(.*)"
			replace="\1=${mail.smtp.host}"/>

		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(techSupportURL)=(.*)"
			replace="\1=${support.url}"/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(techSupportMail)=(.*)"
			replace="\1=${email.support}"/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(userRequestMail)=(.*)"
			replace="\1=${email.request}"/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(userRequestCC)=(.*)"
			replace="\1="/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(feedback.mailTo)=(.*)"
			replace="\1=${email.support}"/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(remote.url)=(.*)"
			replace="\1=${external.url}"/>

		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(zip_location)=\/cagwas\/(.*)"
			replace="\1=\/${file.transfer.base.dir}\/hid_download_cagwas"/>
		<!-- ftp_locationftp_location is where generated files go -->
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(ftp_location)=\/cagwas\/(.*)"
			replace="\1=\/${file.transfer.base.dir}\/hid_download_cagwas"/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(genotype_location)=\/cagwas\/(.*)"
			replace="\1=\/${file.transfer.base.dir}\/\2"/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(ftpHostnameAndPort)=(.*)"
			replace="\1=${apache.virtual.name}:${apache.virtual.port}"/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(ftp_anonBrowse_URL)=(.*)"
			replace="\1=${file.transfer.external.base.url.anon}"/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(ftp_secure_URL)=(.*)"
			replace="\1=${file.transfer.external.base.url.secure}"/>

		<!-- new propety added for url in line to external project page -->
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(remote.study.url)=.*"
			replace="\1=${remote.study.url}"/>

		<mkdir dir="${jboss.home}/server/${jboss.server.name}/conf/cagwas"/>
		<copy tofile="${jboss.home}/server/${jboss.server.name}/conf/cagwas/mail.properties" file="${cagwas.dir.dist}/mail.properties.template">
			<filterset>
				<filtersfile file="${cagwas.dir.dist}/mailzip.properties"/>
			</filterset>
		</copy>
		<copy tofile="${jboss.home}/server/${jboss.server.name}/conf/cagwas/zip.properties" file="${cagwas.dir.dist}/zip.properties.template">
			<filterset>
				<filtersfile file="${cagwas.dir.dist}/mailzip.properties"/>
			</filterset>
		</copy>


	</target>

	<target name="install:jboss:configure:log4j" description="Configure custom entries in system wide log4j" unless="exclude.jboss" >
		<echo message="Configuring Log4J"/>
		<copy file="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml" tofile="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml.pre"/>

		<replaceregexp file="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml"
			byline="true"
			match="^(&lt;!DOCTYPE.*)"
			replace="&lt;!-- \1 --&gt;"
			/>

		<xmltask source="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml"
			dest="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml">
			<xmlcatalog refid="installer.catalog"/>
			<remove path="/log4j:configuration/appender[@name='TestAppender']"/>
			<insert path="/log4j:configuration">
				<![CDATA[
				<appender name="TestAppender" class="org.jboss.logging.appender.RollingFileAppender">
					<errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
					<param name="File" value="${jboss.server.log.dir}/testAppender.log"/>
					<param name="Append" value="false"/>
					<param name="MaxFileSize" value="${log4j.maxFileSize}"/>
					<!--<param name="MaxBackupIndex" value="${log4j.maxDays}"/>-->

					<layout class="org.apache.log4j.PatternLayout"> 
						<param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
					</layout>           
				</appender>
				]]>
			</insert>
			<remove path="/log4j:configuration/category[@name='org.nih.nci']"/>
			<insert path="/log4j:configuration">
				<![CDATA[
				<category name="org.nih.nci">
					<priority value="${log4j.level}"/>
				</category>
				]]>
			</insert>
		</xmltask>
		<validate-log4j
			/>
		<replaceregexp file="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml"
			byline="true"
			match="^&lt;!-- (&lt;!DOCTYPE.*) --&gt;"
			replace="\1"
			/>
	</target>

	<target name="install:jboss:configure" description="Configure JBoss (bindings, login-config.xml, ect)" unless="exclude.jboss"
		depends="
			install:jboss:configure:log4j
		">
		<!-- Calls the following macros
		jboss-bindings - configures ports for jboss
		jboss-login-config - sets up authentication
		secure-jboss-console - adds password to jboss console apps
		jboss-update-shutdown - updates shutdown.jar with correct jndi port so no args need to used 4 shutdown 
		appserver-ssl-configure -  enables ssl
		appserver-configure-external-hostname - configures jboss for use through a reverse proxy 
		grid-secure-configure-connector - configures secure grid
		-->
		<!-- Use below if you are defining all the ports in your install.xml not the NCICB port configuraitons-->
		<jboss-configure
			jboss.server.ports.name="bda-ports"
			jboss.server.binding.template.location="${bda-utils.resource.dir}/template-binding.xml"
			/>
		<!-- Default values for all attributes if you are using standard NCICB port configurations
		<jboss-configure
			/>
		-->
	</target>

	<!-- Calls to bda macros for basic functionality -->
	<target name="install:jboss:stop" description="Stops jboss" unless="exclude.jboss">
		<if>
			<isset property="jboss.exists"/>
			<then>
				<jboss-stop-jboss jboss.server.jndi.port="${jboss.server.jndi.port}"/>
			</then>
		</if>
	</target>

	<target name="install:jboss:start" description="Starts jboss" unless="exclude.jboss">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<jboss-start-jboss />
				<sleep seconds="15"/>
			</then>
		</if>
	</target>
	<target name="install:validation:pre-install" description="Runs pre-install validation checks bda-utils">
		<validate-pre-install
			ant.check.version="${ant.minimum.version}"
			java.check.version.major="${java.major.version}"
			java.check.version.minor="${java.minor.version}"
			database.version="${mysql.minimum.version}"
			/>
	</target>

	<target name="install:validation:pre-install:ports" description="Checks to see if configured ports are listenting and fails buld, meant to be run after jboss:stop">
		<validate-ports-preinstall />
	</target>

	<target name="install:validation:post-install" description="Run post-install checks from bda-utils">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<validate-post-install />
			</then>
		</if>
	</target>

	<target name="-install:jboss:configure:update-shutdown" description="Update default port based on properties in shutdown script so port does not need to be passed when using non-standard port." unless="exclude.jboss">
		<jboss-update-shutdown />
	</target>

	<!-- Wrapper target to deploy JBOSS container -->
	<target name="install:jboss" description="Wrapper scripts that calls all required targets to install the jboss container" unless="exclude.jboss"
		depends="
		install:validation:pre-install,
		install:jboss:stop,
		install:validation:pre-install:ports,
		install:clean:jboss,
		install:init,
		install:jboss:binaries,
		install:jboss:cagwas:re-configure,
		install:jboss:cagwas,
		install:jboss:cagwas:configure,
		install:jboss:configure,
		install:post,
		install:jboss:start
		" />

	<target name="install" description="Installs and configures JBOSS, creates database, and deploys application" 
		depends="
		install:validation:pre-install,
		install:jboss:stop,
		install:validation:pre-install:ports,
		install:clean,
		install:init,
		install:database,
		install:jboss,
		install:post,
		install:jboss:start,
		install:validation:post-install
		"/>

	<target name="install:jboss:cagwas:re-configure" description="Update contents of artifacts if not all properties have been externalized, by extracting artifact, modify it as needed and re-archive it." unless="exclude.jboss">
		<!-- This is only required if configuration files are not externalized, below is a sample of what you may do.
		deploy/cagwas.war/WEB-INF/classes/cagwas-domain-hibernate.cfg.xml 
		./WEB-INF/classes/cagwas.csm.new.hibernate.cfg.xml-->

		<delete dir="${working.dir}/cagwas"/>
		<unzip src="${cagwas.dir.dist}/${cagwas.war.file}" dest="${working.dir}/cagwas"/>

		<replaceregexp file="${working.dir}/cagwas/WEB-INF/classes/cagwas-domain-hibernate.cfg.xml"
			match="(&lt;property name=&quot;dialect&quot;&gt;).*(&lt;\/property&gt;)"
			replace="\1${database.dialect}\2"
			flags="sg"/>

		<replaceregexp file="${working.dir}/cagwas/WEB-INF/classes/cagwas.csm.new.hibernate.cfg.xml"
			match="(&lt;property name=&quot;dialect&quot;&gt;).*(&lt;\/property&gt;)"
			replace="\1${database.dialect}\2"
			flags="sg"/>
		
		<move file="${cagwas.dir.dist}/${cagwas.war.file}" tofile="${cagwas.dir.dist}/${cagwas.war.file}.orig"/>
		<war destfile="${cagwas.dir.dist}/${cagwas.war.file}" compress="false" webxml="${working.dir}/cagwas/WEB-INF/web.xml" >
			<fileset dir="${working.dir}/cagwas">
				<include name="*/**" />
			</fileset>
		</war>  
	</target>

	<!-- Wrapper target to upgrade jboss container. Does not install or configure binaries -->
	<target name="upgrade:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
		depends="
		install:validation:pre-install,
		install:jboss:stop,
		install:init,
		install:jboss:cagwas:re-configure,
		install:jboss:cagwas,
		install:jboss:cagwas:configure,
		install:jboss:start
		" />

	<target name="upgrade" description="Upgrades JBoss and Database"
		depends="
		upgrade:init,
		install:validation:pre-install,
		install:jboss:stop,
		install:init,
		upgrade:database,
		upgrade:jboss,
		install:validation:post-install
		"/>

	<target name="upgrade:database" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database"
		depends="
		install:init,
		install:database:prep,
		upgrade:init
		">
		<database-upgrade
			database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"
			/>
		<database-tag/>
	</target>


	<target name="upgrade:database:tag" description="Tags current state of database with a tag to allow for rollback of database to previous versions." unless="exclude.database"
		depends="
		install:init,
		install:database:prep,
		upgrade:init
		">
		<database-tag/>
	</target>

	<target name="upgrade:database:rollback" description="Rolls back database to previous tagged version using rollback scripts." unless="exclude.database"
		depends="
		install:init,
		install:database:prep,
		upgrade:init
		">
		<database-rollback/>
	</target>

	<target name="upgrade:init">
		<jboss-read-dbconfig
			jboss.ds-xml.file="${cagwas.ds.file}"
			/>
		<jboss-read-ldapconfig
			/>

		<echo  message="Checking if database properties exist.  If they do not on an upgrade install then ${jboss.home}/server/${jboss.server.name}/deploy/${cagwas.ds.file} may not exist."/>
		<property name="db.prop.list" value="database.url,database.user,database.password,database.name"/>
		<properties-exist properties.list="${db.prop.list}"/>
	</target>

	<target name="install:jboss:grid" description="Deploy  to jboss" unless="exclude.jboss">
		<copy file="${grid.resource.dir}/${cgom-cagwas.war.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		<mkdir dir="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}"/>
		<unzip dest="${jboss.home}/server/${jboss.server.name}/lib" src="${grid.resource.dir}/jboss-globus-libs-cagrid1_1.zip" />
		<unzip dest="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}" src="${grid.resource.dir}/${grid.artifact.file}"/>
	</target>

	<target name="install:jboss:grid:configure" description="Configure tomcat-application" unless="exclude.jboss">
		<!--
		<replace dir="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}" token="localhost:8080" value="${jboss.server.hostname}:${jboss.server.port}">
			<include name="**/*.wsdl" />
		</replace>
		<replace file="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}/WEB-INF/etc/globus_resolution_service/jndi-config.xml" token="localhost:8080" value="${jboss.server.hostname}:${jboss.server.port}"/>
		<replace file="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}/WEB-INF/web.xml" token="8080" value="${jboss.server.port}"/>
		<replaceregexp file="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}/WEB-INF/etc/cagrid_${grid.application.name}/jndi-config.xml" 
			match="(\s+.value.)http://.*(.\/value.)" 
			replace="\1http://${jboss.server.hostname}:${jboss.server.port}/ctods-api/http/remoteService\2" 
			flags="g"/>
		<replaceregexp file="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}/WEB-INF/etc/cagrid_${grid.application.name}/${grid.application.name}_registration.xml"
			match="(\s+.wsa:Address.).*(.\/wsa:Address.)" 
			replace="\1${grid.index.url}\2"
			flags="g"/>
		-->
		<grid-appserver-configure/>
	</target>
	<target name="install:post" depends="install:post:jboss">
	</target>

	<target name="install:post:jboss" unless="exclude.jboss">
		<if>
			<not>
				<equals arg1="${exclude.jboss.backup}" arg2="true"/>
			</not>
			<then>
				<property name="changelogFile" location="${install-logs.dir}/chagneLog-${install.time}.txt"/>
				<property name="compare1.dir" location="${backup.jboss.base.dir}/backup/${jboss.relative.path}"/>
				<property name="compare2.dir" location="${jboss.home}"/>
				<report-dir-diff
					dir1="${compare1.dir}"
					dir2="${compare2.dir}"
					reportFile="${changelogFile}"
					/>
				<!-- Copy app server logs -->
				<mkdir dir="${jboss.home}/server/${jboss.server.name}/log"/>
				<mkdir dir="${backup.jboss.base.dir}/backup/${jboss.relative.path}/server/${jboss.server.name}/log"/>
				<!-- so the logs wont be included in the zip --> 
				<move todir="${jboss.home}/server/${jboss.server.name}/log">
					<fileset dir="${backup.jboss.base.dir}/backup/${jboss.relative.path}/server/${jboss.server.name}/log">
						<include name="*"/>
					</fileset>
				</move>

				<!-- Compress backup and cleanup -->
				<mkdir dir="${backup.jboss.base.dir}/backup1"/>
				<zip destfile="${backup.jboss.base.dir}/backup1/${jboss.relative.path}.zip" basedir="${backup.jboss.base.dir}/backup" />
				<delete dir="${backup.jboss.base.dir}/backup"/>
			</then>
		</if>
	</target>

</project>

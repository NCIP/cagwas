<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: install.xml 4757 2008-05-15 20:43:31Z zengje $
$HeadURL: http://gforge.nci.nih.gov/svnroot/cagwas/trunk/software/install.xml $
-->
<project name="cagwas-installer" default="upgrade" basedir="." 
	xmlns:ivy="antlib:org.apache.ivy.ant"
	>
	<description>
		This build file is part of the bda-build-templates project. This is the master install file for the project.  It should be placed in project/software.  This script is copied into the distribution and  executed from the extracted distribution.  It is run by typing "ant" from the master project build.xml or from command line. This script has two flows install and upgrade.
		Install will do the following
 			* Install binaries
			* Configure binaries
			* Install application
			* Configure application
			* Re-create database
			* Upgrade database
		Upgrade will do the following
			* Install application
			* Configure application
			* Upgrade database
		The script includes target that may not be used by all projects, but are included in here becaue it is a template. This script has targets to deal with the following, you can delete targets you don't want to work with
		Application servers (option for grid services also)
			* JBoss
			* Tomcat
		Databases
			* MySQL
			* PostgreSQL
			* Oracle
		This script requires java and ant to run. Every thing else it needs is included in the distribution.
	</description>

	<!-- Properties file related properties and tasks -->
	<property environment="env" />
	<property file="local.properties"/>
	<property file="project.properties"/>
	<property name="properties.file" value="${basedir}/install.properties"/>
	<echo message="Using properties file of ${properties.file}."/>
	<available file="${properties.file}" property="properties.file.exists" />
	<fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail."/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
	<property file="${properties.file}" />
	<!-- Set application.base.path based on platform -->
	<condition property="application.base.path" value="${application.base.path.linux}">
		<or>
			<os family="unix" />
			<os family="mac" />
		</or>
	</condition>

	<condition property="application.base.path" value="${application.base.path.windows}">
		<os family="windows" />
	</condition>
	<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
	<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>


	<!-- Generic properties -->
	<property name="log.dir" value="${basedir}/logs" />
	<property name="working.dir" value="${basedir}/working" />
	<property name="temp.dir" value="${working.dir}/temp" />


	<!-- Install Time properties -->
	<!-- Source and target directories -->
	<property name="bda-utils.dir" value="bda-utils" />
	<property name="tools.dir" value="${basedir}/${tools.dist.relative.dir}" />
	<property name="common.dir.src" value="${basedir}/${common.dist.relative.dir}" />
	<property name="grid.resource.dir" value="${basedir}/${grid.dist.relative.dir}" />
	<property name="grid.application.dir" value="${working.dir}/grid-application" />
	<property name="common.dir.dest" value="${working.dir}/${common.dist.relative.dir}" />
	<property name="db.dir.src" value="${basedir}/${db.dist.relative.dir}" />
	<property name="db.dir.dest" value="${working.dir}/${db.dist.relative.dir}" />
	<property name="db-install.dir.dest" value="${working.dir}/${db-install.dist.relative.dir}" />
	<property name="db-upgrade.dir.dest" value="${working.dir}/${db-upgrade.dist.relative.dir}" />
	<property name="jboss-conf.dir.dest" value="${working.dir}/${jboss-conf.dist.relative.dir}" />

	<!-- Jboss binding configurtion related properties -->
	<property name="jboss.binding.template.location" value="${bda-utils.dir}/resource/${jboss.template.relative.dir}/bindings.xml"/>
	<property name="jboss.service.template.location" value="${bda-utils.dir}/resource/${jboss.template.relative.dir}/jboss-service.xml"/>

	<!-- *-ds.xml and WAR -->
	<property name="cagwas.dir.dist" value="${basedir}/${cagwas.dist.relative.dir}" />
	<property name="cagwas.ds.file" value="cagwas-ds.xml" />
	<property name="cagwas-csm.ds.file" value="cagwas-csm-ds.xml" />
	<property name="cagwas.war.file" value="cagwas.war" />
	<property name="cgom-cagwas.war.file" value="cgom-cagwas.war" />

	<!-- Grid related properties -->
	<property name="grid.artifact.file" value="wsrf.war" />
	<property name="grid.dir.dest" value="wsrf.war" />
	<property name="grid.application.name" value="CAGWAS" />

	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- Task definitions -->
	<taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml">
		<classpath>
			<pathelement location="${bda-utils.dir}/antunit-1.0.jar" />
		</classpath>
	</taskdef>
	<taskdef name="xmlconfig" classname="com.xmlconfig.anttask.XmlConfig" classpathref="bda-utils.classpath" />
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask">
		<classpath>
			<pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar"/>
			<pathelement location="${bda-utils.dir}/bcel-5.1.jar"/>
			<pathelement location="${bda-utils.dir}/commons-httpclient-3.0.1.jar"/>
			<pathelement location="${bda-utils.dir}/commons-logging-1.0.4.jar"/>
			<pathelement location="${bda-utils.dir}/ivy-1.3.1.jar"/>
		</classpath>
	</taskdef>
	<taskdef resource="liquibasetasks.properties" classpathref="bda-utils.classpath"/>

	<!-- Conditionals -->
	<available file="${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml" property="jboss.exists"/>
	<!-- cagwas can use either Oracle or MySQL or PostgreSQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
	<switch value="${database.type}">
		<case value="oracle">
			<property name="database.dialect" value="org.hibernate.dialect.OracleDialect"/>
			<property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.3.0.jar"/>
			<property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
			<property name="db-upgrade.list.file" value="${db-upgrade.oracle.list.file}"/>
			<property name="db-upgrade.conf.file" value="${db-upgrade.oracle.conf.file}"/>
			<property name="database.schema" value="${database.name}"/>
		</case>
		<case value="mysql">
			<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect"/>
			<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.5.jar"/>
			<property name="database.driver" value="com.mysql.jdbc.Driver"/>
			<property name="db-upgrade.list.file" value="${db-upgrade.mysql.list.file}"/>
			<property name="db-upgrade.conf.file" value="${db-upgrade.mysql.conf.file}"/>
			<property name="database.schema" value="${database.name}"/>
		</case>
		<default>
			<fail message="Invalid database type ${database.type}"/>
		</default>
	</switch>

	<path id="jdbc.driver.classpath">
		<pathelement location="${database.driver.file}"/>
	</path>

	<!-- Includes-->
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<!-- Read db configs from existing ds.xml if it exists for use in upgrade installs, if already set in properties file values from properties file will be used -->
	<available file="${jboss.home}/server/${jboss.server.name}/deploy/${cagwas.ds.file}" property="ds.exists"/>
	<if>
		<isset property="ds.exists"/>
		<then>
			<jboss-read-dbconfig
				jboss.ds-xml.file="${cagwas.ds.file}"
				/>
		</then>
		<else>
			<echo message="Warning- could not find ${jboss.home}/server/${jboss.server.name}/deploy/${cagwas.ds.file}"/>
		</else>
	</if>
	<!-- figure out whether to use install-properties.template or upgrade-proprties.template based on the name of the properties file -->
	<propertyregex property="properties.file.type"
		input="${properties.file}"
		regexp=".*(install|upgrade).*"
		select="\1"     
		/>
	<echo message="Properties file type = ${properties.file.type}"/>
	<switch value="${properties.file.type}">
		<case value="install">
			<property name="properties.template.file" value="install-properties.template" />
		</case>
		<case value="upgrade">
			<property name="properties.template.file" value="upgrade-properties.template" />
		</case>
		<default>
			<fail message="Property file name must include 'install' or 'upgrade' so it can be determined which properties template should be used. If you are not certain include 'upgrade' in the name of your proeprties file."/>
		</default>
	</switch>


	<!-- There is any issue with copying files with a filtersfile, any properties with a value of
		another property do not get expanded (xx=${yy} @xx@ will be replaced with ${yy} not the
		value).  I have defined a filter set below for these properties, I then two two copies
		one to the resource.dir.temp using the filterset and then one to the desired directory 
		with the filter file.  If you add new properties that refer to other properties in the
		properties file please add them to the filterset-pre below.
	     Also you should include properties that are declared in this file, like database info below.
	-->
	<property name="resource.dir.temp" value="${working.dir}/tmp" />
	<filterset id="filterset.pre">
		<filter token="application.base.path" value="${application.base.path}"/>
		<filter token="application.url" value="${application.url}"/>
		<filter token="database.url" value="${database.url}"/>
		<filter token="database.system.url" value="${database.system.url}"/>
		<filter token="jboss.home" value="${jboss.home}"/>
		<!-- added internal properties that may be used in a filtered copy -->
		<filter token="database.driver" value="${database.driver}"/>
		<filter token="database.dialect" value="${database.dialect}"/>
		<filter token="hibernate.cfg.file.path" value="${hibernate.cfg.file.path}"/>
		<!-- added for liquibase -->
		<filter token="db-upgrade.run.dir" value="${db-upgrade.dir.dest}/${database.type}"/>
	</filterset>
	

	<!-- Start logging --> 
	<mkdir dir="${log.dir}" />
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${log.dir}/install-${install.time}.log" action="start"/>


	<!-- Installer section -->
	<target name="diag">
		<echoproperties/>
	</target>

	<!-- Clean up destination directory -->
	<target name="install:clean" description="Removes all files from the local filesystem">
		<sleep seconds="5" />
		<delete dir="${jboss.home}" quiet="false" />
		<delete dir="${tomcat.home}" quiet="false" />
	</target>

	<!-- Does directory management and copy some files with filtering to ensure token expansion -->
	<target name="install:init" description="Does directory management to initialize install">
		<mkdir dir="${working.dir}" />
		<delete dir="${working.dir}"/>
		<mkdir dir="${working.dir}" />
		<mkdir dir="${resource.dir.temp}"/>
		<!-- Copy files to ensure values containing variables are expanded, such properties are stored in filterset.pre and then copy with filter files -->
		<copy todir="${resource.dir.temp}" filtering="true">
			<fileset dir="${common.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="filterset.pre"/>
		</copy> 
		<copy todir="${common.dir.dest}" filtering="true">
			<fileset dir="${resource.dir.temp}">
				<include name="**/*"/>
			</fileset>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy> 
	</target>

	<!-- Wrapper install database target, depends on both MySQL and Oracle sub-targets, ifs should ensure only one is run.  Target path can be skipped by exlude.database also calls upgrade:database -->

	<target name="install:database:prep" description="Copies db files with filtering" unless="exclude.database" depends="install:init">
		<echoproperties prefix="database"/>
		<copy todir="${db.dir.dest}" filtering="true">
			<fileset dir="${db.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="filterset.pre"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>
	</target>

	<target name="install:database" description="Runs datbase creation scripts then calls uprade database." unless="exclude.database"
		depends="
		install:init,
		install:database:prep
		">
		<!-- Drop all schema objects or re-create the db -->
		<database-clean/>
		<!-- Run baseline scripts stored in db.install.create.${database.type}.file.list variable -->
		<switch value="${database.type}">
			<case value="oracle">
				<database-install
					db.install.create.file.list="${db.install.create.oracle.file.list}"
					sql.delimiter="/"
					sql.delimitertype="row"
					/>
			</case>
			<case value="mysql">
				<database-install
					db.install.create.file.list="${db.install.create.mysql.file.list}"
					/>
			</case>
		</switch>
		<database-upgrade/>
		<database-tag/>
	</target>

	<target name="install:jboss:binaries" description="Install JBoss binaries" unless="exclude.jboss">
		<!-- If you are using default jboss distribution, non-NCI -->
		<unzip dest="${application.base.path}" src="${tools.dir}/${jboss.binaries.file}" />
		<!-- If you want to use the JEMS installer
		<java jar="${tools.dir}/${jboss.binaries.file}" fork="true">
			<arg line="-installGroup ejb3 installpath=${jboss.home}"/>
		</java> 
		-->
		<if>    
			<os family="unix"/>
			<then>  
				<chmod dir="${jboss.home}/bin" perm="ugo+rx" 
					includes="**/*.sh"/>
			</then>
		</if>
	</target>

	<target name="install:jboss:cagwas" description="Deploy cagwas and common libraries to jboss installation" unless="exclude.jboss">
		<!-- added to ensure working.dirs are fresh for our install -->
		<delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>
		<delete dir="${jboss.home}/server/${jboss.server.name}/work"/>

		<copy file="${cagwas.dir.dist}/${cagwas.war.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		<copy file="${grid.resource.dir}/${cgom-cagwas.war.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		<!--  Many NCI applications require clm for csm, so you can point this to where you have the version you want to use
		<copy file="${bda-utils.dir}/clm-3.2.jar" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
		-->
		<copy file="${database.driver.file}" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
	</target>

	<target name="install:jboss:cagwas:configure" description="Configure cagwas application, copies over externalized properties or configurations that are not part of the jboss configuration" unless="exclude.jboss">
		<copy file="${jboss-conf.dir.dest}/${cagwas.ds.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		<copy file="${jboss-conf.dir.dest}/${cagwas-csm.ds.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		
		<!-- Insert proeprties service xml stuff -->
		<copy todir="${jboss.home}/server/${jboss.server.name}/deploy" file="${jboss-conf.dir.dest}/properties-service.xml">
			<filterset>
				<filter token="jboss.home" value="${jboss.home}"/>
				<filter token="jboss.server.name" value="${jboss.server.name}"/>
			</filterset>
		</copy>
		<!-- -->
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(host)=(.*)"
			replace="\1=${mail.smtp.host}"/>

		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(techSupportURL)=(.*)"
			replace="\1=${support.url}"/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(techSupportMail)=(.*)"
			replace="\1=${email.support}"/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(userRequestMail)=(.*)"
			replace="\1=${email.request}"/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(userRequestCC)=(.*)"
			replace="\1="/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(feedback.mailTo)=(.*)"
			replace="\1=${email.support}"/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(remote.url)=(.*)"
			replace="\1=${external.url}"/>

		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(zip_location)=\/cagwas\/(.*)"
			replace="\1=\/${file.transfer.base.dir}\/hid_download_cagwas"/>
		<!-- ftp_locationftp_location is where generated files go -->
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(ftp_location)=\/cagwas\/(.*)"
			replace="\1=\/${file.transfer.base.dir}\/hid_download_cagwas"/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(genotype_location)=\/cagwas\/(.*)"
			replace="\1=\/${file.transfer.base.dir}\/\2"/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(ftpHostnameAndPort)=(.*)"
			replace="\1=${apache.virtual.name}:${apache.virtual.port}"/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(ftp_anonBrowse_URL)=(.*)"
			replace="\1=${file.transfer.external.base.url.anon}"/>
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(ftp_secure_URL)=(.*)"
			replace="\1=${file.transfer.external.base.url.secure}"/>

		<!-- new propety added for url in line to external project page -->
		<replaceregexp file="${cagwas.dir.dist}/mailzip.properties" byline="true"
			match="^(remote.study.url)=.*"
			replace="\1=${remote.study.url}"/>

		<mkdir dir="${jboss.home}/server/${jboss.server.name}/conf/cagwas"/>
		<copy tofile="${jboss.home}/server/${jboss.server.name}/conf/cagwas/mail.properties" file="${cagwas.dir.dist}/mail.properties.template">
			<filterset>
				<filtersfile file="${cagwas.dir.dist}/mailzip.properties"/>
			</filterset>
		</copy>
		<copy tofile="${jboss.home}/server/${jboss.server.name}/conf/cagwas/zip.properties" file="${cagwas.dir.dist}/zip.properties.template">
			<filterset>
				<filtersfile file="${cagwas.dir.dist}/mailzip.properties"/>
			</filterset>
		</copy>


	</target>

	<target name="install:jboss:configure" description="Configure JBoss (bindings, login-config.xml, ect)" unless="exclude.jboss"
		depends="install:jboss:binaries,
		-install:jboss:configure:ports,
		-install:jboss:configure:login-conf,
		-install:jboss:configure:log4j,
		-install:jboss:configure:secure-console,
		-install:jboss:configure:update-shutdown
		"/>

	<target name="-install:jboss:configure:secure-console" description="Configure JBoss ports using bindings files" unless="exclude.jboss">
		<secure-jboss-console/>
	</target>
	<!-- Configure ports used by JBOSS (either bindings or editing jboss config.files) -->
	<target name="-install:jboss:configure:ports" description="Configure JBoss ports using bindings files" unless="exclude.jboss">
		<jboss-bindings
			jboss.server.bindingfile.location="${jboss.home}/server/${jboss.server.name}/conf/bindings.xml"
			/>
		<!-- If you need to pass in custom binding file use the following
		<jboss-bindings
			jboss.server.bindingfile.location="${jboss.home}/server/${jboss.server.name}/conf/bindings.xml"
			jboss.server.binding.template.location="${jboss.binding.template.location}"
			jboss.server.service.template.location="${jboss.service.template.location}"
			/>
		-->
	</target>

	<target name="-install:jboss:configure:login-conf" description="Add custom login-config.xml content from snippet from software/resources/deploy/jboss-config/login-config.${auth.type}-block.xml" unless="exclude.jboss">
		<if>    
			<equals arg1="${authentication.type}" arg2="ldap"/>
			<then>  
				<property name="login-config.block.file" value="${jboss-conf.dir.dest}/login-config.ldap-block.xml"/>
			</then> 
			<else>  
				<if>    
					<equals arg1="${authentication.type}" arg2="db"/>
					<then>  
						<property name="login-config.block.file" value="${jboss-conf.dir.dest}/login-config.db-block.xml"/>
					</then> 
					<else>  
						<fail message="${authentication.type} is not a valid authentiation type, please change to db or ldap and re-run the build."/>
					</else> 
				</if>   
			</else> 
		</if>   
		<echo message="Inserting ${login-config.block.file} into ${jboss.home}/server/${jboss.server.name}/conf/login-config.xml"/>
		<xmlconfig in="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml" verbose="false">
			<insertbranch path="//policy" srcxmlfile="${login-config.block.file}" srcpath="//application-policy" />
		</xmlconfig>
	</target>

	<!-- Configure MQ settings based on contents of ncia/software/resrouces/deploy/jbossmq-destinations-service.block.xml -->
	<target name="-install:jboss:configure:jbossmq-dest" description="Configure MQ settings based on contents of software/common/resource/jboss-conf/jbossmq-destinations-service.block.xml" unless="exclude.jboss">
		<!-- Provide template to change jboss mq configurations 
		<property name="jboss-mq.block.file" value="${resource.dir.target}/jbossmq-destinations-service.block.xml"/>
		<xmlconfig in="${jboss.home}/server/${jboss.server.name}/deploy/jms/jbossmq-destinations-service.xml" verbose="false">
			<insertbranch path="//server" srcxmlfile="${jboss-mq.block.file}" srcpath="//mbean[1]" />
			<insertbranch path="//server" srcxmlfile="${jboss-mq.block.file}" srcpath="//mbean[2]" />
		</xmlconfig>
		-->
	</target>


	<!-- Configure log4j settings based on contents of cagwas/software/resrouces/deploy/log4j.block.xml -->
	<target name="-install:jboss:configure:log4j" unless="exclude.jboss">
		<!-- Fill in content here -->
	</target>

	<!-- Calls to bda macros for basic functionality -->
	<target name="install:jboss:stop" description="Stops jboss" unless="exclude.jboss">
		<if>
			<isset property="jboss.exists"/>
			<then>
				<jboss-stop-jboss jboss.server.jndi.port="${jboss.server.jndi.port}"/>
			</then>
		</if>
	</target>

	<target name="install:jboss:start" description="Starts jboss" unless="exclude.jboss">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<jboss-start-jboss />
				<sleep seconds="15"/>
			</then>
		</if>
	</target>
	<target name="install:validation:pre-install" description="Runs pre-install validation checks bda-utils">
		<validate-pre-install
			ant.check.version="${ant.minimum.version}"
			java.check.version.major="${java.major.version}"
			java.check.version.minor="${java.minor.version}"
			database.version="${mysql.minimum.version}"
			/>
	</target>

	<target name="install:validation:pre-install:ports" description="Checks to see if configured ports are listenting and fails buld, meant to be run after jboss:stop">
		<validate-ports-preinstall />
	</target>

	<target name="install:validation:post-install" description="Run post-install checks from bda-utils">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<validate-post-install />
			</then>
		</if>
	</target>

	<target name="-install:jboss:configure:update-shutdown" description="Update default port based on properties in shutdown script so port does not need to be passed when using non-standard port." unless="exclude.jboss">
		<jboss-update-shutdown />
	</target>

	<!-- Wrapper target to deploy JBOSS container -->
	<target name="install:jboss" description="Wrapper scripts that calls all required targets to install the jboss container" unless="exclude.jboss"
		depends="
		install:validation:pre-install,
		install:jboss:stop,
		install:validation:pre-install:ports,
		install:clean,
		install:init,
		install:jboss:binaries,
		install:jboss:cagwas:re-configure,
		install:jboss:cagwas,
		install:jboss:cagwas:configure,
		install:jboss:grid,
		install:jboss:grid:configure,
		install:jboss:configure,
		install:jboss:start
		" />

	<target name="install" description="Installs and configures JBOSS, creates database, and deploys application" 
		depends="
		install:validation:pre-install,
		install:jboss:stop,
		install:validation:pre-install:ports,
		install:clean,
		install:init,
		install:database,
		install:jboss,
		install:jboss:start,
		install:validation:post-install
		"/>

	<target name="install:jboss:cagwas:re-configure" description="Update contents of artifacts if not all properties have been externalized, by extracting artifact, modify it as needed and re-archive it." unless="exclude.jboss">
		<!-- This is only required if configuration files are not externalized, below is a sample of what you may do.
		deploy/cagwas.war/WEB-INF/classes/cagwas-domain-hibernate.cfg.xml 
		./WEB-INF/classes/cagwas.csm.new.hibernate.cfg.xml-->

		<delete dir="${working.dir}/cagwas"/>
		<unzip src="${cagwas.dir.dist}/${cagwas.war.file}" dest="${working.dir}/cagwas"/>

		<replaceregexp file="${working.dir}/cagwas/WEB-INF/classes/cagwas-domain-hibernate.cfg.xml"
			match="(&lt;property name=&quot;dialect&quot;&gt;).*(&lt;\/property&gt;)"
			replace="\1${database.dialect}\2"
			flags="sg"/>

		<replaceregexp file="${working.dir}/cagwas/WEB-INF/classes/cagwas.csm.new.hibernate.cfg.xml"
			match="(&lt;property name=&quot;dialect&quot;&gt;).*(&lt;\/property&gt;)"
			replace="\1${database.dialect}\2"
			flags="sg"/>
		
		<move file="${cagwas.dir.dist}/${cagwas.war.file}" tofile="${cagwas.dir.dist}/${cagwas.war.file}.orig"/>
		<war destfile="${cagwas.dir.dist}/${cagwas.war.file}" compress="false" webxml="${working.dir}/cagwas/WEB-INF/web.xml" >
			<fileset dir="${working.dir}/cagwas">
				<include name="*/**" />
			</fileset>
		</war>  
	</target>

	<!-- Wrapper target to upgrade jboss container. Does not install or configure binaries -->
	<target name="upgrade:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
		depends="
		install:validation:pre-install,
		install:jboss:stop,
		install:init,
		install:jboss:cagwas:re-configure,
		install:jboss:cagwas,
		install:jboss:cagwas:configure,
		install:jboss:start
		" />

	<target name="upgrade" description="Upgrades JBoss and Database"
		depends="
		upgrade:init,
		install:validation:pre-install,
		install:jboss:stop,
		install:init,
		upgrade:database,
		upgrade:jboss,
		install:validation:post-install
		"/>

	<target name="upgrade:database" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database"
		depends="
		install:init,
		install:database:prep,
		upgrade:init
		">
		<database-upgrade/>
		<database-tag/>
	</target>


	<target name="upgrade:database:tag" description="Tags current state of database with a tag to allow for rollback of database to previous versions." unless="exclude.database"
		depends="
		install:init,
		install:database:prep,
		upgrade:init
		">
		<database-tag/>
	</target>

	<target name="upgrade:database:rollback" description="Rolls back database to previous tagged version using rollback scripts." unless="exclude.database"
		depends="
		install:init,
		install:database:prep,
		upgrade:init
		">
		<database-rollback/>
	</target>

	<target name="upgrade:init">
		<echo  message="Checking if database properties exist.  If they do not on an upgrade install then ${jboss.home}/server/${jboss.server.name}/deploy/${cagwas.ds.file} may not exist."/>
		<property name="db.prop.list" value="database.url,database.user,database.password,database.name"/>
		<properties-exist properties.list="${db.prop.list}"/>
	</target>

	<target name="install:jboss:grid" description="Deploy  to jboss" unless="exclude.jboss">
		<mkdir dir="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}"/>
		<unzip dest="${jboss.home}/server/${jboss.server.name}/lib" src="${grid.resource.dir}/jboss-globus-libs-cagrid1_1.zip" />
		<unzip dest="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}" src="${grid.resource.dir}/${grid.artifact.file}"/>
	</target>

	<target name="install:jboss:grid:configure" description="Configure tomcat-application" unless="exclude.jboss">
		<!--
		<replace dir="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}" token="localhost:8080" value="${jboss.server.hostname}:${jboss.server.port}">
			<include name="**/*.wsdl" />
		</replace>
		<replace file="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}/WEB-INF/etc/globus_resolution_service/jndi-config.xml" token="localhost:8080" value="${jboss.server.hostname}:${jboss.server.port}"/>
		<replace file="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}/WEB-INF/web.xml" token="8080" value="${jboss.server.port}"/>
		<replaceregexp file="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}/WEB-INF/etc/cagrid_${grid.application.name}/jndi-config.xml" 
			match="(\s+.value.)http://.*(.\/value.)" 
			replace="\1http://${jboss.server.hostname}:${jboss.server.port}/ctods-api/http/remoteService\2" 
			flags="g"/>
		<replaceregexp file="${jboss.home}/server/${jboss.server.name}/deploy/${grid.dir.dest}/WEB-INF/etc/cagrid_${grid.application.name}/${grid.application.name}_registration.xml"
			match="(\s+.wsa:Address.).*(.\/wsa:Address.)" 
			replace="\1${grid.index.url}\2"
			flags="g"/>
		-->
		<grid-appserver-configure/>
	</target>
</project>

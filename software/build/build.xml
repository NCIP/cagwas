<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: build.xml 4753 2008-05-15 18:24:16Z saksass $
$HeadURL: http://gforge.nci.nih.gov/svnroot/generic/trunk/software/build.xml $
-->
<project name="build-bda-template" default="build:all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
	<description>
		This build file is part of the bda-build-template project.  This is the master build file for the project.  It should be placed in project/software/.  This script wrappers sub projects to build, test and inspect code.  Additionally this project manges creation of distributions and deployment locally or remotely.  Deployments will call the install.xml from the distribution to install or upgrade the application.  Lastly this script will run include targets that require manipulation of containers (selenium tests because they require starting the application server container (and require a fully deployed application which this process is responsible for). This build script assumes two sub-projects cagwas and bda-blueprints-api. The API targets are commented out and can be removed if not needed.  Also support for both tomcat and jboss download, install and configure are included.  These scripts require Java, Ant, Database and SVN to work.
	</description>

	<!-- Property file related properties and tasks -->
	<property environment="env" />
	<!-- The project.properties stores properties that are shared between both build.xml and install.xml. Typically properties that are related to the distribution directories, or files. -->
	<property file="local.properties" />
	<property file="project.properties" />

	<property name="properties.file" value="install.properties"/>

	<echo message="Using properties file of ${properties.file}." />
	<available file="${properties.file}" property="properties.file.exists" />
	<fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail." />

	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2" />
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2" />
	<property file="${properties.file}" />
	<!-- Set application.base.path based on platform -->
	<condition property="application.base.path" value="${application.base.path.linux}">
		<or>
			<os family="unix" />
			<os family="mac" />
		</or>
	</condition>

	<condition property="application.base.path" value="${application.base.path.windows}">
		<os family="windows" />
	</condition>
	<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
	<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>


	<!-- added for remote deployments since file is copied to root of install dir -->
	<basename property="properties.file.name" file="${properties.file}" />

	<!-- BDA standard structure -->
	<property name="build.dir" location="." />
	<property name="software.dir" location=".." />
	<property name="common.dir" location="${software.dir}/common" />
	<property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />
	<property name="target.dir" location="${software.dir}/target" />
	<property name="bda-download.dir" location="${common.dir}/bda-download" />
	<property name="ivy.settings.dir" location="${common.dir}/ivy" />
	<property name="lib.dir" location="${target.dir}/lib" />
	<property name="temp.dir" location="${target.dir}/temp" />
	<property name="reports.dir" location="${target.dir}/reports" />
	<property name="bda-utils.dir" location="${target.dir}/bda-utils" />
	<property name="log.dir" location="${target.dir}/logs" />
	<property name="dist.dir" location="${target.dir}/dist" />
	<property name="download.dir" location="${target.dir}/download" />
	<property name="pt.dir" location="${target.dir}/persistent-transient" />
	<property name="working.dir" location="${target.dir}/working" />


	<!-- Ivy Related props -->
	<property name="ivy.settings.file" value="ivy.settings.xml" />
	<property name="ivy.file" value="ivy-2.0.0-beta2.jar" />
	<property name="ivy-cacore.file" value="ivy-cacore-2.0.0-beta2.jar" />

	<!-- Properties that relate to how to call build targets from sub-projects-->
	<!-- Working directory passed to Ant tasks -->
	<property name="cagwas.base.dir" value="${software.dir}/cagwas" />

	<!-- Build file names relative working dir above, if the basedir of the sub-project ant script is ".." you should set the *.basdir to and the build file should include the dir and build file name from the *.base.dir -->
	<property name="cagwas.build.file" value="build.xml" />

	<!-- The target name that should be called from the sub-project build file -->
	<property name="cagwas.build.target" value="build-all" />

	<!-- Used by dist:*:prep to determin list of files to use for incremental build process.
		Directory and files must be in svn to work.
	-->
	<property name="db.src.dir" value="${cagwas.base.dir}/db" />
	<property name="db-install.src.dir" value="${db.src.dir}/db-install" />
	<property name="db-upgrade.src.dir" value="${db.src.dir}/db-upgrade" />

	<!-- Distribution Structure properties, used to copy files into the distribution area.
       		Use project.propertie relative dir names becasue they are used by install also-->
	<property name="dist.exploded.dir" value="${dist.dir}/exploded" />
	<property name="cagwas.dist.dir" value="${dist.exploded.dir}/${cagwas.dist.relative.dir}" />
	<property name="tools.dist.dir" value="${dist.exploded.dir}/${tools.dist.relative.dir}" />
	<property name="common.dist.dir" value="${dist.exploded.dir}/${common.dist.relative.dir}" />
	<property name="db-install.dist.dir" value="${dist.exploded.dir}/${db-install.dist.relative.dir}" />
	<property name="db-upgrade.dist.dir" value="${dist.exploded.dir}/${db-upgrade.dist.relative.dir}" />
	<property name="jboss-conf.dist.dir" value="${dist.exploded.dir}/${jboss-conf.dist.relative.dir}" />

	<!-- Selenium settings -->
	<property name="selenium.jar" value="${lib.dir}/test-selenium/selenium-server-1.0-beta-1.jar" />
	<property name="selenium.browser" value="*iexplore" />
	<!--  What you would need for a ci server, recommend setting in local.properties
	<property name="selenium.browser" value="*firefox /usr/lib64/firefox-1.5.0.12/firefox-bin"/>
	-->
	<property name="selenium.proxy.port" value="4444" />
	<property name="selenium.report.dir" value="${reports.dir}/selenium" />
	<property name="selenium.report.file" value="selenium-rpt.html" />
	<property name="selenium.test.dir" value="${software.dir}/tests/functional/selenium" />
	<property name="selenium.test.suite" value="${selenium.test.dir}/bdaTestSuite.html" />
	<property name="selenium.url" value="http://${jboss.server.hostname}:${jboss.server.port}" />

	<!-- Where to write files retrieved by get, into the distribution area.  The file names come from project.properties  -->
	<property name="jboss.dest.file" value="${download.dir}/${jboss.binaries.file}" />
	<property name="tomcat.dest.file" value="${download.dir}/${tomcat.binaries.file}" />

	<!-- Default install time targets passed by deploy targets to the installer, can be overridden by being set on the command line if different target is desitred.  -->
	<property name="install.target" value="install" />
	<property name="upgrade.target" value="upgrade" />

	<!-- Where grand stores it's outputed pdf reports of build files -->
	<property name="grand.rpt.dir" value="${common.dir}/grand" />
	<!-- Hot deploy variables -->
	<property name="jboss.deploy.dir"  value="${jboss.home}/server/${jboss.server.name}/deploy"/>
	<property name="cagwas.name"  value="cagwas"/>
	<property name="cagwas.file.name"  value="${cagwas.name}.war"/>
	<property name="cagwas.src.dir" value="${cagwas.base.dir}/WebRoot"/>


	<!-- retrive ivy files then retrieve bda files and librarires -->
	<property name="bda-download.file" value="bda-ivy-build.xml" />
	<!-- Use the snippet below if you want these to be transcient files
	<mkdir dir="${bda-download.dir}" />
	<property name="bda-download.src.url" value="http://gforge.nci.nih.gov/svnroot/automation/trunk/software/bda-download/${bda-download.file}" />
	<get src="${bda-download.src.url}" dest="${bda-download.dir}/${bda-download.file}" />
	-->

	<ant inheritAll="false" inheritRefs="false" antfile="${bda-download.file}" target="retrieve-bda" dir="${bda-download.dir}">
		<property name="bda.version" value="${bda.version}" />
		<property name="bda-utils.dir" location="${bda-utils.dir}" />
		<property name="lib.dir" location="${lib.dir}" />
		<property name="software.dir" location="${software.dir}" />
	</ant>



	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<path id="ivy.classpath">
		<fileset dir="${lib.dir}">
			<include name="${ivy.file}" />
			<include name="${ivy-core.file}" />
		</fileset>
	</path>

	<!-- Task definitions -->
	<taskdef name="xmlconfig" classname="com.xmlconfig.anttask.XmlConfig" classpathref="bda-utils.classpath" />
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath" />
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask">
		<classpath>
			<pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<!-- Includes- include BDA marcos -->
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<!-- Start logging -->
	<mkdir dir="${log.dir}" />
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${log.dir}/install-${install.time}.log" action="start" />
	<!-- set some db variables -->
	<switch value="${database.type}">
		<case value="oracle">
			<property name="database.dialect" value="org.hibernate.dialect.OracleDialect"/>
			<property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.3.0.jar"/>
			<property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
			<property name="db-upgrade.list.file" value="${db-upgrade.oracle.list.file}"/>
			<property name="db-upgrade.conf.file" value="${db-upgrade.oracle.conf.file}"/>
			<property name="database.schema" value="${database.name}"/>
		</case>
		<case value="mysql">
			<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect"/>
			<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.5.jar"/>
			<property name="database.driver" value="com.mysql.jdbc.Driver"/>
			<property name="db-upgrade.list.file" value="${db-upgrade.mysql.list.file}"/>
			<property name="db-upgrade.conf.file" value="${db-upgrade.mysql.conf.file}"/>
			<property name="database.schema" value="${database.name}"/>
		</case>
		<default>
			<fail message="Invalid database type ${database.type}"/>
		</default>
	</switch>

	<path id="jdbc.driver.classpath">
		<pathelement location="${database.driver.file}"/>
	</path>


	<!-- Targets -->
	<target name="diagnostics" description="diagnostics">
		<echoproperties />
		<diagnostics />
	</target>

	<target name="clean">
		<delete dir="${dist.dir}" />
		<delete dir="${temp.dir}" />
	</target>

	<target name="init" description="Sets up build are and initalizes variables">
		<echo message=" ______   ______   _______ " />
		<echo message="(____  \ (______) (_______)" />
		<echo message=" ____)  ) _     _  _______ " />
		<echo message="|  __  ( | |   | ||  ___  |" />
		<echo message="| |__)  )| |__/ / | |   | |" />
		<echo message="|______/ |_____/  |_|   |_|" />
		<mkdir dir="${target.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.exploded.dir}" />
		<mkdir dir="${cagwas.dist.dir}" />
		<mkdir dir="${common.dist.dir}" />
		<mkdir dir="${tools.dist.dir}" />
		<mkdir dir="${temp.dir}" />
		<mkdir dir="${download.dir}" />
		<mkdir dir="${pt.dir}" />

		<available file="${jboss.dest.file}" property="jboss.tools.exists" />
		<available file="${tomcat.dest.file}" property="tomcat.tools.exists" />
		<!-- If jboss is required to build, then check for jboss in jboss.home, then check for in jboss in working directory, if not found then download it into this that directory.  If found at any point set local.jboss.home to where it is found.  This can be passed to sub-projects so then can compile code against distribution.  This is especially important on AntHillPro server which will not have jboss present, thus will have to use a copy in the working area.  This also makes it easier to start the project, if the developer does not yet have jboss installed, build will download it and install it so build can proceed. -->
		<if>
			<equals arg1="${require.jboss}" arg2="true" />
			<then>
				<available file="${jboss.home}/lib/commons-httpclient.jar" property="rt.jboss.exists" />
				<if>
					<isset property="rt.jboss.exists" />
					<then>
						<property name="local.jboss.home" location="${jboss.home}" />
						<echo message="JBOSS_HOME exists ${jboss.home}" />
					</then>
					<else>
						<property name="local.jboss.home" location="${pt.dir}/${jboss.binaries.relative.dir}" />
						<available file="${local.jboss.home}/lib/commons-httpclient.jar" property="local.jboss.exists" />
						<echo message="JBOSS_HOME does not exist checking for LOCAL_JBOSS_HOME ${local.jboss.home}" />
						<if>
							<not>
								<isset property="local.jboss.exists" />
							</not>
							<then>
								<echo message="LOCAL_JBOSS_HOME not found downloading." />
								<antcall target="dist:tools:retrieve:jboss" />
								<java jar="${tools.dir}/${jboss.binaries.file}" fork="true">
									<arg line="-installGroup ejb3 installpath=${local.jboss.home}" />
								</java>
							</then>
							<else>
								<echo message="LOCAL_JBOSS_HOME found ${local.jboss.home}" />
							</else>
						</if>
					</else>
				</if>

			</then>
		</if>
	</target>

	<target name="ivy:clean" description="Cleans up the ivy cache of this project and all sub-projects">
		<ivy:settings file="${ivy.settings.dir}/${ivy.settings.file}" />
		<ivy:cleancache />
		<ant inheritAll="false" inheritRefs="false" antfile="bda-ivy-build.xml" target="ivy-cleancache" dir="${bda-download.dir}">
			<property name="bda-utils.dir" value="${bda-utils.dir}" />
			<property name="lib.dir" value="${lib.dir}" />
			<property name="software.dir" value="${software.dir}" />
		</ant>
	</target>

	<!-- Wrapper build target, call appropriate builds for sub-projects -->
	<target name="build:all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions" depends="
		clean,
		init,
		build:cagwas
		" />

	<target name="build:cagwas" depends="init" description="Call webapp sub-projects build target to produce artifiacts">
		<!-- setting the property in the ant call overrides the property in the sub-project allowing the artifact to be produced where needed -->
		<ant inheritAll="false" inheritRefs="false" 
			antfile="${cagwas.build.file}" 
			target="${cagwas.build.target}" 
			dir="${cagwas.base.dir}">
			<property name="artifacts.dir" value="${cagwas.dist.dir}" />
			<property name="JBOSS.HOME.DIR" value="${jboss.home}" />
		</ant>
		<ant inheritAll="false" inheritRefs="false" 
			antfile="${cagwas.build.file}" 
			dir="${cagwas.base.dir}"
			target="deploy_artifacts" >
			<property name="artifacts.dir" value="${cagwas.dist.dir}" />
			<property name="JBOSS.HOME.DIR" value="${jboss.home}" />
		</ant>
		<copy todir="${cagwas.dist.dir}">
			<fileset dir="${cagwas.base.dir}/conf">
				<include name="**/zip.properties.template"/>
				<include name="**/mail.properties.template"/>
			</fileset>
		</copy>
		<copy todir="${cagwas.dist.dir}" file="${cagwas.base.dir}/mailzip.properties"/>
	</target>

	<target name="dist" description="Makes all distributions: installer, upgrader and source" depends="
		build:all,
		dist:installer,
		dist:upgrader,
		dist:src" />

	<target name="dist:src" description="Makes source distribution">
		<!-- Add tasks here to zip up src into a distribution, may require some additoinal properties for distribution name" -->
	</target>

	<target name="dist:tools:retrieve" description="Downloads binary applications from commonlibrary repository" depends="
		init,
		dist:tools:retrieve:jboss
		" />

	<target name="dist:tools:retrieve:jboss" unless="jboss.tools.exists" description="Downloads JBOSS from binary repository and verifies checksum">
		<get src="${jboss.src.url}" dest="${jboss.dest.file}" />
		<get src="${jboss.src.url}.MD5" dest="${jboss.dest.file}.MD5" />
		<checksum file="${jboss.dest.file}" verifyProperty="jboss.cksum.ok" />
		<if>
			<equals arg1="${jboss.cksum.ok}" arg2="true" />
			<then>
				<echo message="Downloaded jboss sucessfully" />
			</then>
			<else>
				<fail message="Failed to download jboss file sucessfully." />
			</else>
		</if>
	</target>

	<target name="dist:installer:prep" depends="dist:tools:retrieve" description="Copies artifacts not generated by sub-project builds into the install distribution area">

		<!-- Copy db-install and db-upgrade scripts from source into distribution area. The db files need to be under db-[install/upgard]/${database.type}. -->
		<copy todir="${db-install.dist.dir}" overwrite="true">
			<fileset dir="${db-install.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${db-upgrade.dist.dir}" overwrite="true">
			<fileset dir="${db-upgrade.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<!-- Clean up spaces at the end of line -->
		<replaceregexp 
			byline="true" flags="i" 
			match="^(CREATE DATABASE.*)$"
			replace="-- \1">
			<fileset dir="${db-install.dist.dir}">
				<include name="**/*.sql"/>
				<include name="**/*.dmp"/>
			</fileset>
		</replaceregexp>
		<replaceregexp 
			byline="true" flags="i" 
			match="^(USE.*)$"
			replace="-- \1">
			<fileset dir="${db-install.dist.dir}">
				<include name="**/*.sql"/>
				<include name="**/*.dmp"/>
			</fileset>
		</replaceregexp>
		<replaceregexp 
			byline="true" flags="i" 
			match="ALGORITHM.*VIEW"
			replace="VIEW">
			<fileset dir="${db-install.dist.dir}">
				<include name="**/*.sql"/>
				<include name="**/*.dmp"/>
			</fileset>
		</replaceregexp>


		<!-- Copy install related xml and properties files -->
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="install.xml" />
				<include name="install.properties" />
				<include name="*properties.template" />
				<include name="project.properties" />
			</fileset>
		</copy>

		<!-- Set default target and properyties.file to install and install.properties -->
		<replaceregexp file="${dist.exploded.dir}/install.xml" byline="true" match="(.project.*default=.)\w+(.\s+.*)" replace="\1install\2" />

		<!-- Rename install.xml to build.xml so manual installs will not need to include the -f optoin on ant, simplifying the install proces. -->
		<move file="${dist.exploded.dir}/install.xml" tofile="${dist.exploded.dir}/build.xml" />

		<!-- Copy over BDA macrodefs and librarires -->
		<copy todir="${dist.exploded.dir}/bda-utils" overwrite="true">
			<fileset dir="${bda-utils.dir}">
				<include name="**/*" />
			</fileset>
		</copy>

		<!-- This  copies common files over, common files are currently resource files like jboss configuration files and database scripts -->
		<copy todir="${common.dist.dir}" overwrite="true">
			<fileset dir="${common.dir}">
				<include name="**/*" />
			</fileset>
		</copy>

		<!-- Copy over binary distributions downloaded earlier -->
		<copy todir="${tools.dist.dir}" overwrite="true">
			<fileset dir="${download.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<target name="dist:installer" depends="dist:installer:prep" description="Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations">
		<delete file="${dist.dir}/${cagwas.install.zip.file}" />
		<zip destfile="${dist.dir}/${cagwas.install.zip.file}" basedir="${dist.exploded.dir}" />
	</target>

	<target name="dist:upgrader:prep" description="Copies artifacts not generated by sub-project builds into the install distribution area">
		<!-- Cleans up files copied by dist:*:prep targets to ensure only required files are present becaue this target is run after dist:installer:prep -->
		<delete dir="${tools.dist.dir}" />
		<delete>
			<fileset dir="${dist.exploded.dir}">
				<include name="*.xml" />
				<include name="*properties*" />
			</fileset>
		</delete>
		<!-- Copy db-upgrade scripts from source into distribution area. The db files need to be under db-upgrade/${database.type}. -->
		<copy todir="${db-upgrade.dist.dir}" overwrite="true">
			<fileset dir="${db-upgrade.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>

		<!-- Copy install related xml and properties files -->
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="install.xml" />
				<include name="upgrade.properties" />
				<include name="*properties.template" />
				<include name="project.properties" />
			</fileset>
		</copy>
		<!-- Change default target and properties.file to upgrade and upgrade.properties -->
		<replaceregexp file="${dist.exploded.dir}/install.xml" byline="true" match="(.project.*default=.)\w+(.\s+.*)" replace="\1upgrade\2" />

		<!-- Rename install.xml to build.xml to simply install but not having to provide -f option to ant command line -->
		<move file="${dist.exploded.dir}/install.xml" tofile="${dist.exploded.dir}/build.xml" />

		<!-- Copy BDA macrodefs and library files -->
		<copy todir="${dist.exploded.dir}/bda-utils" overwrite="true">
			<fileset dir="${bda-utils.dir}">
				<exclude name="**/*.zip" />
			</fileset>
		</copy>

		<!-- This  copies common files over, common files are currently resource files like jboss configuration files and database scripts -->
		<copy todir="${common.dist.dir}" overwrite="true">
			<fileset dir="${common.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<target name="dist:upgrader" depends="dist:upgrader:prep" description="Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations">
		<delete file="${dist.dir}/${cagwas.upgrade.zip.file}" />
		<zip destfile="${dist.dir}/${cagwas.upgrade.zip.file}" basedir="${dist.exploded.dir}" />

	</target>


	<target name="deploy:local:install" depends="build:all,dist:installer:prep" description="Installs and configures the application and required binaries and re-creates the datbase  on the local machine. Used for developer desktops and ci environments.">
		<!--
		  * Requires a database installation.
		  * Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).
		  * If you want properties to be used at install time they must be included in a proeprties file.
		  * Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install.
		  * This target will use differnt properties based on linux (linux-install.properties) or windows (windows-install.properties) installs.
		  * It only supports using those properties files for now, so if you want to change install time properites edit these files.
		-->
		<!-- deploy:local fails about basedirectory in real strange place macrodefs:319, this should fix it -->
		<mkdir dir="${dist.exploded.dir}/lib" />

		<!-- Copies over all files so linux and windows properties are present -->
		<copy todir="${dist.exploded.dir}">
			<fileset dir="${build.dir}">
				<include name="*.properties" />
			</fileset>
		</copy>
		<exec osfamily="unix" executable="ant" dir="${dist.exploded.dir}" failonerror="true">
			<!-- use alternate properties file since default has replace values -->
			<arg value="-Dproperties.file=${properties.file}" />
			<!-- force reinstall of database and jboss without prompting -->
			<arg value="-Dforce.reinstall=true" />
			<arg value="${install.target}" />
		</exec>
		<exec osfamily="windows" executable="ant.bat" dir="${dist.exploded.dir}" failonerror="true">
			<!-- use alternate properties file since default has replace values -->
			<arg value="-Dproperties.file=${install.properties}" />
			<!-- force reinstall of database and jboss without prompting -->
			<arg value="-Dforce.reinstall=true" />
			<arg value="${install.target}" />
		</exec>

	</target>

	<target name="deploy:local:upgrade" depends="build:all,dist:upgrader:prep" description="Upgrades and configures the application and database  on the local machine. Used for developer desktops and ci environments.">
		<!--
		  * Requires a database installation.
		  * Will use the target from install.xml specified in ${upgrade.target} (defaults to install unless passed in on command line).
		  * Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install, if you want properties to be used at install time they must be included in a proeprties file.
		  * This target will use differnt properties based on linux (linux-upgrade.properties) or windows (windows-upgrade.properties) installs.
		  * It only supports using those properties files for now, so if you want to change install time properites edit these files.
		-->
		<!-- deploy:local fails about basedirectory in real strange place macrodefs:319, this should fix it -->
		<mkdir dir="${dist.exploded.dir}/lib" />

		<!-- Copies over all files so linux and windows properties are present -->
		<copy todir="${dist.exploded.dir}">
			<fileset dir="${build.dir}">
				<include name="*.properties" />
			</fileset>
		</copy>

		<exec osfamily="unix" executable="ant" dir="${dist.exploded.dir}" failonerror="true">
			<!-- use alternate properties file since default has replace values -->
			<arg value="-Dproperties.file=${properties.file}" />
			<!-- force reinstall of database and jboss without prompting -->
			<arg value="-Dforce.reinstall=true" />
			<arg value="-Dlocal.install=true" />
			<arg value="${upgrade.target}" />
		</exec>

		<exec osfamily="windows" executable="ant.bat" dir="${dist.exploded.dir}" failonerror="true">
			<!-- use alternate properties file since default has replace values -->
			<arg value="-Dproperties.file=${properties.file}" />
			<!-- force reinstall of database and jboss without prompting -->
			<arg value="-Dforce.reinstall=true" />
			<arg value="-Dlocal.install=true" />
			<arg value="${upgrade.target}" />
		</exec>

		<echo message="The JBoss server will not be started as part of the local deployment. You will need to run $JBOSS_HOME/bin/run.bat (run.sh for Linux)." />
	</target>

	<macrodef name="deploy-files" description="Macro for deploying and extracting distrution to server">
		<attribute name="ssh.user" default="${ssh.server.username}" />
		<attribute name="ssh.host" default="${ssh.server.hostname}" />
		<attribute name="remote.directory.property.name" default="ssh.dir.temp" />
		<attribute name="properties.file" default="${properties.file}" />
		<attribute name="dist.dir" default="${dist.dir}" />
		<attribute name="dist.file" />
		<sequential>
			<!-- Validate remote directory is valid -->
			<propertycopy name="remote.dir" from="@{remote.directory.property.name}" />
			<check-valid-directory-name directory.property="remote.dir" />
			<!-- Delete/re-create remote directory -->
			<remote-ssh remotesshcommand="rm -rf ${remote.dir};mkdir -p ${remote.dir}" />
			<!-- work around for issue where basedir is required but is not currently used -->
			<remote-ssh remotesshcommand="mkdir -p ${remote.dir}/lib" />

			<!-- copy distribution and prop file to remote system -->
			<remote-scp remoteScpFileToCopy="@{dist.dir}/@{dist.file}" remoteScpToDir="@{ssh.user}@@@{ssh.host}:${remote.dir}" />
			<remote-scp remoteScpFileToCopy="@{properties.file}" remoteScpToDir="@{ssh.user}@@@{ssh.host}:${remote.dir}" />
			<!-- Extract zip file -->
			<remote-ssh remotesshcommand="cd ${remote.dir}; unzip -q @{dist.file}" />
		</sequential>
	</macrodef>

	<target name="deploy:remote:install" description="Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)" depends="
		build:all,
		dist:installer
		">
		<!--
		  * Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).
		  * Requires specifying -Dproperties.file=@file@ on the command line to point installer to correct enviornment to install into.
		  * Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install, if you want properties to be used at install time they must be included in a proeprties file.
		-->
		<!-- Call macro to deploy files on desired server -->
		<deploy-files dist.file="${cagwas.install.zip.file}" />
		<!-- SSH to machine ant run ant command line to install application -->
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${install.target}" />
	</target>

	<target name="deploy:remote:upgrade" description="Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)" depends="
		build:all,
		dist:upgrader
		">
		<!--
		  * Will use the target from install.xml specified in ${upgrade.target} (defaults to upgrade unless passed in on command line).
		  * Requires specifying -Dproperties.file=@file@ on the command line to point installer to correct enviornment to install into.
		  * Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install, if you want properties to be used at install time they must be included in a proeprties file.
		-->
		<!-- Call macro to deploy files on desired server -->
		<deploy-files dist.file="${cagwas.upgrade.zip.file}" />
		<!-- SSH to machine ant run ant command line to install application -->
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${upgrade.target}" />
	</target>

	<target name="usage" description="Explains how to use this build script">
		<echo message="To run a remote upgrade type: ant deploy:remote:upgrade -Dproperties.file=[path to environment proeprty file]" />
	</target>

	<target name="report:grand" depends="dist:installer:prep" description="Generates target flow diagrams for build files">
		<!-- Temporary fix to make grand work for install.xml -->
		<report-grand 
			build.file.location="build.xml" 
			output.file.dir="${grand.rpt.dir}" 
			output.file.name="master-build.xml" />
		<report-grand 
			build.file.location="${dist.exploded.dir}/build.xml" 
			output.file.dir="${grand.rpt.dir}"
			output.file.name="master-install.xml" />
		<report-grand 
			build.file.location="${cagwas.base.dir}/build.xml"
			output.file.dir="${grand.rpt.dir}"
			output.file.name="cagwas-build.xml" />
		<report-grand 
			build.file.location="${cagwas.base.dir}/build_download.xml"
			output.file.dir="${grand.rpt.dir}"
			output.file.name="cagwas-build_download.xml" />
		<!-- These don't work because they are trying to run firefox 
		<report-grand 
			build.file.location="${cagwas.base.dir}/selenium-bulk-test.xml"
			output.file.dir="${grand.rpt.dir}"
			output.file.name="cagwas-selenium-bulk-test.xml"/>
		<report-grand 
			build.file.location="${cagwas.base.dir}/selenium_PF_test.xml"
			output.file.dir="${grand.rpt.dir}"
			output.file.name="cagwas-selenium_PF_test.xml"/>
		<report-grand 
			build.file.location="${cagwas.base.dir}/selenium-test.xml"
			output.file.dir="${grand.rpt.dir}"
			output.file.name="cagwas-selenium-test.xml"/>
		-->
	</target>

	<!--
	<target name="test:all" description="Runs test target for all sub-projects" depends="
		clean,
		init,
		test:bda-blueprints-api,
		test:cagwas
		" />


	<target name="test:cagwas" depends="init" description="Calls test target for sub-project">
		<ant inheritAll="false" inheritRefs="false" antfile="${cagwas.test.file}" target="test" dir="${cagwas.base.dir}">
			<property name="dist.dir" value="${cagwas.dist.dir}" />
		</ant>
	</target>

	<target name="static-analysis:all" description="Runs static-analysis target for all sub-projects" depends="
		clean,
		init,
		static-analysis:bda-blueprints-api,
		static-analysis:cagwas
		" />

	<target name="static-analysis:cagwas" depends="init" description="Calls static-analysis target for sub-project">
		<ant inheritAll="false" inheritRefs="false" antfile="${cagwas.build.file}" target="static-analysis" dir="${cagwas.base.dir}">
			<property name="dist.dir" value="${cagwas.dist.dir}" />
		</ant>
	</target>

	<target name="continuous-integration" description="calls wrapper targets for continuous integration build" depends="
		build:all,
		static-analysis:all
		" />


	<target name="init:ivy" description="Initializes ivy-repo.based on ivy definition file and ivy settings file">
		<mkdir dir="${local.repo.dir}" />
		<property name="ivy.dep.file" value="${ivy.settings.dir}/ivy-test.xml" />
		<ivy:settings file="${ivy.settings.dir}/ivy.settings.xml" />
	</target>

	<target name="ivy-test-selenium" depends="init:ivy" description="Downloads selenium libraries from ivy into library directory">
		<ivy:resolve refresh="true" conf="test-selenium" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-selenium" />
		<path id="project.test.selenium.classpath">
			<fileset dir="${lib.dir}/test-selenium">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>

	<target name="test:seleniumrc:start">
		<echo message="${lib.dir}/test-selenium/selenium-server-0.9.0.jar" />
		<java jar="${lib.dir}/test-selenium/selenium-server-0.9.0.jar" fork="true" spawn="true" />
	</target>

	<target name="test:seleniumrc:stop" description="Stops selenuimrc server when using selenium from java">
		<get taskname="selenium-shutdown" src="http://localhost:${selenium.proxy.port}/selenium-server/driver/?cmd=shutDown" dest="${temp.dir}/result.txt" ignoreerrors="true" />
	</target>

	<target name="test:selenium:init" description="Sets up environment for running selenium tests">
		<mkdir dir="${selenium.report.dir}" />
		<if>
			<not>
				<socket server="${jboss.server.hostname}" port="${jboss.server.port}" />
			</not>
			<then>
				<jboss-start-jboss />
			</then>
		</if>
	</target>

	<target name="test:selenium" description="Wrapper target to selenium test suite" depends="
		ivy-test-selenium,
		test:selenium:init,
		test:selenium:run,
		test:seleniumrc:stop
		" />

	<target name="test:selenium:run" description="Executes selenium test suite">
		# Another optoin  for running tests
		<java jar="${selenium.jar}" fork="true">
			<arg line=" -htmlSuite &quot;${selenium.browser}&quot;"/>
			<arg line=" &quot;${selenium.url}&quot;"/>
			<arg line=" &quot;${selenium.test.suite}&quot;"/>
			<arg line=" &quot;${selenium.report.dir}/${selenium.report.file}&quot;"/>
			<arg line=" -timeout 30"/>
			<arg line=" -log ${temp.dir}/selenium-debug.log"/>
		</java> 
		#	
		<osfamily property="os.family" />
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<echo message="To be able to selenium tests on Unix platforms you need to meet the following conditions." />
				<echo message="You need to be logged in on the console running X (developer linux or mac workstation)." />
				<echo message=" If you are running it from a server that does not have a console (like a CI server) you need to be running at runlevel 3, running and xframe buffer ('Xvfb :1 -screen 0 1024x768x24', should be setup on a CI server) and have your DISPLAY environment variable sto to match your frame buffer ('DISPLAY=:1.0', should be set in .bash_profile on CI server)." />
				<fail unless="env.DISPLAY" message="DISPLAY environment variable not set, please set it as outlined above and run again." />
			</then>
		</if>
		<taskdef resource="selenium-ant.properties" classpathref="project.test.selenium.classpath" />
		<selenese suite="${selenium.test.suite}" browser="${selenium.browser}" results="${selenium.report.dir}/${selenium.report.file}" multiWindow="falsE" timeoutInSeconds="60" port="${selenium.proxy.port}" startURL="${selenium.url}" />
	</target>

	-->

	<!--  Though the general rule was that all install tasks happen as part of the install.xml we did decide to add hot deploys of the ear and web content as part of build.xml to increase the developer "friendlyness" of the build :) -->
	<target name="deploy:hot" depends="build:all" description="Hot deploys the deployment artifact">
		<copy file="${cagwas.dist.dir}/${cagwas.file.name}" todir="${jboss.deploy.dir}" />
	</target>

	<target name="deploy:hot:jsp" description="Copies all current JSP code to the deployed application for quick update">
		<for param="toDir">
			<path>
				<dirset dir="${jboss.deploy.dir}/../tmp/deploy" includes="tmp*${cagwas.name}*" />
			</path>
			<sequential>
				<copy todir="@{toDir}" overwrite="true">
					<fileset dir="${cagwas.src.dir}">
						<include name="**/*.jsp" />
						<include name="**/*.jspf" />
						<include name="**/*.css" />
						<include name="**/*.js" />
						<include name="**/*.jpg" />
						<include name="**/*.gif" />
						<include name="**/*.png" />
						<include name="**/*.faces" />
						<include name="**/*.tag" />
						<include name="**/*.tagf" />
					</fileset>
				</copy>
			</sequential>
		</for>
	</target>

	<target name="database:prep" description="Copies db files with filtering">
		<echoproperties prefix="database"/>
		<copy todir="${working.dir}/" filtering="true"  overwrite="true">
			<fileset dir="${db.src.dir}">
				<include name="**/db-upgrade/**/*"/>
			</fileset>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
				<filter token="db-upgrade.run.dir" value="${working.dir}/db-upgrade/${database.type}"/>
			</filterset>
		</copy>
	</target>

	<target name="database:gencl" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database"
		depends="
			database:prep
			">
			<database-genchangelog
				database.changelog.file="${target.dir}/generated-change-log.xml"
				/>
	</target>
	<target name="database:diff" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database"
		depends="
			database:prep
			">
			<database-diff
				output.file.txt="${target.dir}/generated-diff-log.txt"
				output.file.xml="${target.dir}/generated-diff-log.xml"
				/>
	</target>
	<target name="database:doc" description="Generates database documentation." unless="exclude.database"
		depends="
			database:prep
			">
		<mkdir dir="${reports.dir}/db"/>
		<database-doc
			output.dir="${reports.dir}/db"
			database.changelog.file="${working.dir}/db-upgrade/db-upgrade.xml"
			/>
	</target>
</project>

<project name="cagwas" default="build-all" basedir=".">
    <description>
        Build and deploy the caGWAS portal
    </description>
    <!-- set global properties for this build -->
    <property name="PROP.FILE" location="build.properties" />
	<property name="MAILZIP.FILE" location="mailzip.properties" />
    <property file="${PROP.FILE}" />
	<property file="${MAILZIP.FILE}" />
    <echo>
        PROP.FILE = ${PROP.FILE}
    	MAILZIP.FILE = ${MAILZIP.FILE}
        DEPLOY.LOCATION = ${DEPLOY.LOCATION}
        JBOSS.HOME.DIR = ${JBOSS.HOME.DIR}
        JBOSS.SERVER.DIR = ${JBOSS.SERVER.NAME}
        JBOSS.CONF.DIR = ${JBOSS.CONF.DIR}
        JBOSS.DEPLOY.DIR = ${JBOSS.DEPLOY.DIR}
    	JBOSS.LIB.DIR = ${JBOSS.LIB.DIR}
    	DB.TYPE = ${db.type} 
    	EXTERNAL.CONFIG.DIR = ${EXTERNAL.CONFIG.DIR}
    </echo>
    <condition property="check.props">
        <and>
        	 <isset property="JBOSS.HOME.DIR" />
        	 <isset property="JBOSS.SERVER.NAME" />
             <isset property="JBOSS.CONF.DIR" />
             <isset property="JBOSS.DEPLOY.DIR" />
             <isset property="JBOSS.LIB.DIR" />
        	 <isset property="db.type" />
        	 <isset property="EXTERNAL.CONFIG.DIR" /> 
        </and>
    </condition>

    <condition property="remote.deploy">
        <equals arg1="${DEPLOY.LOCATION}" arg2="remote" />
    </condition>

    <filter token="CADSR.DS.URL" value="${CADSR.DS.URL}" />
    <filter token="CADSR.DS.USER" value="${CADSR.DS.USER}" />
    <filter token="CADSR.DS.PSWD" value="${CADSR.DS.PSWD}" />
    <filter token="TEST.VALID.USER" value="${TEST.VALID.USER}" />
    <filter token="TEST.VALID.PSWD" value="${TEST.VALID.PSWD}" />
    <filter token="TEST.BAD.USER" value="${TEST.BAD.USER}" />
    <filter token="TEST.BAD.PSWD" value="${TEST.BAD.PSWD}" />
    <filter token="TIER" value="${TIER}" />
    <filter token="TIER.UPPER" value="${TIER.UPPER}" />
    <filter token="TIER.NAME" value="${TIER.NAME}" />
    <filter token="WEBLOG.DIR" value="${WEBLOG.DIR}" />



	<!--
	TARGET: build_war
	Will compile the java code and build the war file
	-->
	<property name="src" value="./src" />
	<property name="lib" value="./WebRoot/WEB-INF/lib" />
	<property name="classes" value="./WebRoot/WEB-INF/classes" />

	<!-- Class to  run for the framework integration tests -->
	<property name="test.class.name" value="gov.nih.nci.cagwas.test.integration.CagwasIntegrationTestSuite" />

	<!-- Class to  run for the selenium integration tests -->
	<property name="test-selenium.class.name" value="gov.nih.nci.cagwas.test.integration.CagwasUIIntegrationTest" />

	<!-- Classpath to run the junit tests -->
	<path id="test.classpath">
		<pathelement location="${build.classes.dir}" />
		<pathelement location="${lib}/junit-3.8.1.jar" />
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${not.deployed.jarFiles}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${dependency.artifacts.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- Runs the selenium tests -->
	<target name="run_test" description="Start Selenmium Server ; Run JUnit Tests ; Stop Selenium Server">
		<parallel>
			<antcall target="start-server">
			</antcall>
			<sequential>
				<echo taskname="waitfor" message="Wait selenium server to launch" />
				<waitfor maxwait="2" maxwaitunit="minute" checkevery="100">
					<http url="http://localhost:4446/selenium-server/driver/?cmd=testComplete" />
				</waitfor>
				<antcall target="test-selenium">
				</antcall>
				<antcall target="stop-server">
				</antcall>
			</sequential>
		</parallel>
	</target>

	<!-- Starts the selenium server in the background to run the tests against -->
	<target name="start-server" depends="stop-server">
		<parallel>
			<java jar="${lib}/selenium-server.jar" spawn="yes" fork="true">
				<arg line="-port 4446" />
			</java>
		</parallel>
	</target>

	<!-- stops the selenuim server -->
	<target name="stop-server">
		<get taskname="selenium-shutdown" src="http://localhost:4446/selenium-server/driver/?cmd=shutDown" dest="result.txt" ignoreerrors="true" />
		<echo taskname="selenium-shutdown" message="DGF Errors during shutdown are expected" />
	</target>

	<!-- Runs the framework integration tests -->
	<target name="test-framework" depends="compile">
		<junit fork="yes" haltonfailure="yes">
			<test name="${test.class.name}" />
			<formatter type="plain" usefile="false" />
			<classpath refid="test.classpath" />
		</junit>
	</target>

	<!-- Runs the selenium integration tests -->
	<target name="test-selenium" depends="compile">
		<junit fork="yes" haltonfailure="yes">
			<test name="${test-selenium.class.name}" />
			<formatter type="plain" usefile="false" />
			<classpath refid="test.classpath" />
		</junit>
	</target>

	<target name="compile">
		<javac srcdir="${build.source.dir}" destdir="${build.classes.dir}" source="1.5" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${webapp.lib.dir}">
					<include name="*.jar" />
				</fileset>

				<fileset dir="${not.deployed.jarFiles}">
					<include name="*.jar" />
				</fileset>

				<fileset dir="${dependency.artifacts.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<target name="build-all" depends="init, clean, -filter">
		<delete dir="${build.classes.dir}" failonerror="false" />
		<delete file="${module_name}.war" failonerror="false" />
		<delete file="${webapp.classes.dir}/cagwasResources.properties" failonerror="false" />
		<mkdir dir="${build.classes.dir}" />
		<javac srcdir="${build.source.dir}" destdir="${build.classes.dir}" source="1.5" debug="true" excludes="**/test/**" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${webapp.lib.dir}">
					<include name="*.jar" />
				</fileset>

				<fileset dir="${not.deployed.jarFiles}">
					<include name="*.jar" />
				</fileset>

				<fileset dir="${dependency.artifacts.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
		<copy todir="${webapp.classes.dir}">
			<fileset dir="${build.classes.dir}">
				<include name="**/*.class" />
			</fileset>
		</copy>
		<copy todir="${webapp.classes.dir}">
			<fileset dir="${build.source.dir}">
				<include name="**/*.properties" />
				<include name="cagwasResources.properties" />
				<include name="cagwas-domain-hibernate.cfg.xml" />
				<exclude name="zip.properties" />
				<exclude name="mail.properties" />
			</fileset>
		</copy>
		<war destfile="${module_name}.war" webxml="${webapp.dir}/WEB-INF/web.xml">
			<fileset dir="${webapp.dir}">
				<exclude name="${webapp.lib.dir}/log4*.jar" />
			</fileset>
			<zipfileset dir="${dependency.artifacts.dir}" prefix="WEB-INF/lib">
				<include name="caintegrator-analysis-commons.jar" />
				<include name="caintegrator-application-commons.jar" />
				<include name="caintegrator-spec.jar" />
			</zipfileset>
		</war>
		<copy file="${module_name}.war" todir="${artifacts.dir}" />
	</target>

	<!--
	TARGET: deploy
	simply copies the war file to the jboss deployment directory
	-->
	<target name="-filter" depends="configure.database.type.asMySQL, configure.database.type.asOracle">
		<!-- filtering properties -->
		<echo>properties ...
		project_name = ${project_name}
		project_title = ${project_title}
		</echo>
		<filter token="project_name" value="${project_name}" />
		<filter token="project_title" value="${project_title}" />
        <mkdir dir="./artifacts.dir"></mkdir>
        <delete>
			<fileset file="./WebRoot/WEB-INF/tiles-defs.xml" />
			<fileset file="${artifacts.dir}/*.*" />
			<fileset file="${src}/cagwas-domain-hibernate.cfg.xml" />
		</delete>
        <echo message="Configuring cagwas-domain-hibernate-cfg.xml" />
		<copy file="conf/cagwas-domain-hibernate.cfg.xml.template" toFile="${src}/cagwas-domain-hibernate.cfg.xml" filtering="true">
		  <filterset begintoken="@" endtoken="@">
		  	<filter token="MODULE_NAME" value="${module_name}"/>
		  	<filter token="DB_JNDI_CONNECTION" value="${cagwas.jndi.connection}"/>
		  	<filter token="DB_DIALECT" value="${DB_DIALECT}"/>
		  </filterset>
		</copy>	
		<copy tofile="./WebRoot/WEB-INF/tiles-defs.xml" filtering="true">
			<fileset file="conf/tiles-defs.template.xml" />
		</copy>
		

	</target>
	<target name="deploy">
		<copy file="${module_name}.war" todir="${jboss.deploy.dir}"/>
	</target>

	<!--
	TARGET: deploy_artifacts
	Copies the configuration files to the deployment-artifacts directory
    -->
	<target name="deploy_artifacts" depends="config_common_security_module, configure_cagwas-properties-service">
		<echo>filter mail and zip properties ...</echo>
		<copy file="conf/zip.properties.template" toFile="${artifacts.dir}/zip.properties" filtering="true">
			<filterset begintoken="@" endtoken="@">
				<filtersfile file="${MAILZIP.FILE}" />
			</filterset>
		</copy>
		<copy file="conf/mail.properties.template" toFile="${artifacts.dir}/mail.properties" filtering="true">
			<filterset begintoken="@" endtoken="@">
				<filtersfile file="${MAILZIP.FILE}" />
			</filterset>
		</copy>
		<copy file="${artifacts.dir}/oracle-ds.xml" todir="${artifacts.dir}" />
		<copy file="${artifacts.dir}/oracle-ds-csm.xml" todir="${artifacts.dir}" />
		<copy file="${artifacts.dir}/cagwas.hibernate.cfg.xml" todir="${artifacts.dir}" />
		<copy file="${artifacts.dir}/ApplicationSecurityConfig.xml" todir="${artifacts.dir}" />
		<copy file="${artifacts.dir}/login-config.xml" todir="${artifacts.dir}" />
		<copy file="${artifacts.dir}/properties-service.xml" todir="${artifacts.dir}" />
	</target>


	<!--
	TARGET: config_common_security_module
	Configures the common security module creating the necessary files
	for Authentication and Authorization
	-->
	<target name="config_common_security_module">
		<echo message="Configuring Common Security Module" />

		<!-- Configuring ApplicationSecurityConfig.xml -->
		<echo message="Setting ApplicationSecurityConfig.xml" />
		<delete file="${artifacts.dir}/ApplicationSecurityConfig.xml" />
		<copy file="conf/csm/ApplicationSecurityConfig.xml.template" tofile="${artifacts.dir}/ApplicationSecurityConfig.xml" />
		<replaceregexp file="${artifacts.dir}/ApplicationSecurityConfig.xml" match="@CONTEXT_NAME@" replace="${module_name}" flags="g" />
		<replaceregexp file="${artifacts.dir}/ApplicationSecurityConfig.xml" match="@HIBERNATE_CONFIG_FILE@" replace="${csm.hibernate.config.file}" flags="g" />

		<!-- Configuring cagwas.hibernate.cfg.xml -->
		<echo message="Setting cagwas.hibernate.cfg.xml" />
		<delete file="${artifacts.dir}/cagwas.hibernate.cfg.xml" />
		<copy file="conf/csm/cagwas.hibernate.cfg.xml.template" tofile="${artifacts.dir}/cagwas.hibernate.cfg.xml" />
		<replaceregexp file="${artifacts.dir}/cagwas.hibernate.cfg.xml" match="@DATASOURCE_JNDI@" replace="${csm.jndi.connection.datasource}" flags="g" />

		<!-- Configuring oracle-ds.xml -->
		<echo message="Configuring oracle-ds.xml" />
		<delete file="${artifacts.dir}/oracle-ds.xml" />
		<copy file="conf/csm/oracle-ds.xml.template" tofile="${artifacts.dir}/oracle-ds.xml" />
		<replaceregexp file="${artifacts.dir}/oracle-ds.xml" match="@DATASOURCE_JNDI@" replace="${db.jndi.connection}" flags="g" />
		<replaceregexp file="${artifacts.dir}/oracle-ds.xml" match="@DB_CONNECTION_URL@" replace="${urlDbalias}" flags="g" />
		<replaceregexp file="${artifacts.dir}/oracle-ds.xml" match="@DB_USERNAME@" replace="${databaseUser}" flags="g" />
		<replaceregexp file="${artifacts.dir}/oracle-ds.xml" match="@DB_PASSWORD@" replace="${databasePassword}" flags="g" />
		<replaceregexp file="${artifacts.dir}/oracle-ds.xml" match="@ORACLE_DRIVER_CLASS@" replace="${jdbcRuntimeDriver}" flags="g" />
		<replaceregexp file="${artifacts.dir}/oracle-ds.xml" match="@EXCEPTION_SORTER_CLASS@" replace="${csm.exception.sorter.class}" flags="g" />

		<!-- Configuring properties-service.xml -->
		<echo message="Configuring properties-service.xml" />
		<delete file="${artifacts.dir}/properties-service-csm.xml" />
		<copy file="conf/csm/properties-service.xml.template" tofile="${artifacts.dir}/properties-service-csm.xml" />
		<replaceregexp file="${artifacts.dir}/properties-service-csm.xml" match="@CSM_APPLICATION_CONFIG_FILE@" replace="${csm.application.config.file}" flags="g" />
		<replaceregexp file="${artifacts.dir}/properties-service-csm.xml" match="@ncicb.configure.directory@" replace="${ncicb.configure.directory}" flags="g" />

		<!-- Configuring login-config.xml -->
		<echo message="Configuring login-config.xml" />
		<delete file="${artifacts.dir}/login-config.xml" />
		<copy file="conf/csm/login-config.xml.template" tofile="${artifacts.dir}/login-config.xml" />
		<replaceregexp file="${artifacts.dir}/login-config.xml" match="@MODULE_NAME@" replace="${module_name}" flags="g" />
		<replaceregexp file="${artifacts.dir}/login-config.xml" match="@LDAP_HOST@" replace="${ldap.provider.url}" flags="g" />
		<replaceregexp file="${artifacts.dir}/login-config.xml" match="@LDAP_CONTEXT@" replace="${ldap.context}" flags="g" />
	</target>

	<!--
	TARGET: development_config_common_security_module
	Will create and configure the CSM for the current local development
	environments. Depends on the "config_common_security_module"
	to create the necessary files
	-->
	<target name="development_config_common_security_module" depends="config_common_security_module">
		<!-- Copy it to Jboss Deploy folder -->
		<copy file="${artifacts.dir}/oracle-ds.xml" todir="${jboss.deploy.dir}" />
		<!-- Copy it to Jboss Conf folder -->
		<copy file="${artifacts.dir}/cagwas.hibernate.cfg.xml" todir="${jboss.conf.dir}" />
		<!-- Copy it to Jboss Conf folder -->
		<copy file="${artifacts.dir}/ApplicationSecurityConfig.xml" todir="${jboss.conf.dir}" />
	</target>

	<target name="configure_cagwas-properties-service">
	<!-- Configuring cagwas-properties-service.xml -->
		<echo message="Configuring properties-service.xml" />
		<delete file="${artifacts.dir}/properties-service.xml" />
		<copy file="conf/caintegrator-properties-service.xml" tofile="${artifacts.dir}/properties-service.xml" />
		<replaceregexp file="${artifacts.dir}/properties-service.xml" match="@CSM_APPLICATION_CONFIG_FILE@" replace="${csm.application.config.file}" flags="g" />
		<replaceregexp file="${artifacts.dir}/properties-service.xml" match="@ncicb.configure.directory@" replace="${ncicb.configure.directory}" flags="g" />
		<!--<copy file="${build.source.dir}/zip.properties" todir="${artifacts.dir}" />
		<copy file="${build.source.dir}/mail.properties" todir="${artifacts.dir}" />
		<copy file="${build.source.dir}/cagwas-domain-hibernate.cfg.xml" todir="${artifacts.dir}" />-->
	</target>

	<target name="development_config_cagwas_module" depends="configure_cagwas-properties-service">
		<!-- Copy it to Jboss Conf folder -->
		<echo> Moving files to external folder</echo>
		<delete>
			<fileset dir="${ncicb.configure.directory}" includes="*.*"/>
		</delete>
		<copy file="${artifacts.dir}/zip.properties" todir="${ncicb.configure.directory}" />
		<copy file="${artifacts.dir}/mail.properties" todir="${ncicb.configure.directory}" />
		<copy file="${artifacts.dir}/${caintegrator.hibernate.config.file}" todir="${ncicb.configure.directory}" />
		<copy file="${artifacts.dir}/caIntegratorConfig.xml" todir="${ncicb.configure.directory}" />
	</target>

	<target name="build_strutstest" depends="build-all">
		<javac srcdir="${build.source.dir}" destdir="${build.classes.dir}" source="1.5" excludes="**/CagwasIntegrationTestSuite.java" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${webapp.lib.dir}">
					<include name="*.jar" />
				</fileset>

				<fileset dir="${not.deployed.jarFiles}">
					<include name="*.jar" />
				</fileset>

				<fileset dir="${dependency.artifacts.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
		<copy todir="${build.classes.dir}" file="${build.source.dir}/cagwas-domain-hibernate.cfg.xml" />
		<copy todir="${webapp.dir}/WEB-INF/test">
			<fileset dir="${basedir}/test">
				<include name="applicationContext*.xml" />
			</fileset>
		</copy>
	</target>

	<target name="run_strutstest" depends="build_strutstest">
		<junit fork="yes" haltonfailure="yes">
			<test name="gov.nih.nci.cagwas.web.test.AllActionTests" />
			<formatter type="plain" usefile="false" />
			<classpath>
				<pathelement path="${build.classes.dir}" />
				<pathelement path="${webapp.dir}" />
				<fileset dir="${webapp.lib.dir}">
					<include name="*.jar" />
				</fileset>

				<fileset dir="${not.deployed.jarFiles}">
					<include name="*.jar" />
				</fileset>

				<fileset dir="${dependency.artifacts.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</junit>
	</target>
	<!-- Clean up -->
		<target name="clean">
			<delete dir="${build.classes.dir}"/>
			<delete dir="${javadoc.dir}"/>
			<delete dir="${artifacts.dir}"/>
			<mkdir dir="${artifacts.dir}" />
		</target>
	
	<!-- Generate Javadoc documentation -->
		<target name="javadoc">
			<echo>Creating javadoc directory</echo>
			<mkdir dir="${javadoc.dir}"/>
			
			<echo>Generating documentation</echo>
			<javadoc
				sourcepath="${build.source.dir}"
				packagenames="gov.nih.nci.cagwas.*"
				destdir="${javadoc.dir}"
				excludepackagenames="**/web/test"
				Windowtitle="${project_title}"
				Header="${project_title}"
			/>
		</target>
	<!-- Validation -->
	<target name="check.ant.version" description="Ensure that we're running ant 1.6">
		<fail message="Please install using ant 1.6">
		<condition>
			<not>
				<contains string="${ant.version}" substring="1.6"/>
			</not>
		</condition>
		</fail>
	</target>
	<!-- check DB type -->
	<target name="check.database.type" description="check if we are build for Oracle or mySQL">
		<condition property="isMySQL">
		  <matches pattern="mysql" string="${db.type}"/>
		</condition>
		<condition property="isOracle">
		  <matches pattern="oracle" string="${db.type}"/>
		</condition>
		<echo> isMySQL="${isMySQL}" </echo>
	</target>
	<!-- check DB type -->
	<target name="configure.database.type.asMySQL" depends="check.database.type" if="isMySQL" description="configure the build for MySQL">
		    <echo message="Configures CSM Data Source as mySQL" />
		 	<property name="DB_DIALECT" value="${db.jdbcRuntimeDriver.mysql}" />
		 	<property name="DB_DRIVER_CLASS" value="${db.jdbcRuntimeDriver.mysql}" />
		 	<property name="DB_EXCEPTION_SORTER_CLASS" value="${db.exception.sorter.class.mysql}" />
	</target>
	<target name="configure.database.type.asOracle" depends="check.database.type" unless="isMySQL" description="configure the build for Oracle">
		<echo message="Configures CSM Data Source as Oracle" />
	 	<property name="DB_DIALECT" value="${db.jdbcRuntimeDriver.oracle}" />
	 	<property name="DB_DRIVER_CLASS" value="${db.jdbcRuntimeDriver.oracle}" />
	 	<property name="DB_EXCEPTION_SORTER_CLASS" value="${db.exception.sorter.class.oracle}" />
	</target>
	<!-- Configures CSM Data Source for mySQL or Oracle -->
	<target name="configure.csm.data.source.type" description="Configures Data Source for mySQL or Oracle">
	<delete file="${artifacts.dir}/{$module_name}-ds-csm.xml" />
	<copy file="conf/ds.xml.template" tofile="${artifacts.dir}/{$module_name}-ds-csm.xml" />
	<replaceregexp file="${artifacts.dir}/{$module_name}-ds-csm.xml" match="@DATASOURCE_JNDI@" replace="${csm.jndi.connection.datasource}" flags="g" />
	<replaceregexp file="${artifacts.dir}/{$module_name}-ds-csm.xml" match="@DB_CONNECTION_URL@" replace="${csm.urlDbalias}" flags="g" />
	<replaceregexp file="${artifacts.dir}/{$module_name}-ds-csm.xml" match="@DB_USERNAME@" replace="${csm.databaseUser}" flags="g" />
	<replaceregexp file="${artifacts.dir}/{$module_name}-ds-csm.xml" match="@DB_PASSWORD@" replace="${csm.databasePassword}" flags="g" />
	<if>
	 <equals arg1="${db.type}" arg2="mysql" />
	 <then>
	    <replaceregexp file="${artifacts.dir}/{$module_name}-ds-csm.xml" match="@DRIVER_CLASS@" replace="${db.jdbcRuntimeDriver.mysql}" flags="g" />
		<replaceregexp file="${artifacts.dir}/{$module_name}-ds-csm.xml" match="@EXCEPTION_SORTER_CLASS@" replace="${db.exception.sorter.class.mysql}" flags="g" />
	 </then>
	 <elseif>
	  <equals arg1="${db.type}" arg2="oracle" />
	  <then>
	    <replaceregexp file="${artifacts.dir}/{$module_name}-ds-csm.xml" match="@ORACLE_DRIVER_CLASS@" replace="${db.jdbcRuntimeDriver.oracle}" flags="g" />
		<replaceregexp file="${artifacts.dir}/{$module_name}-ds-csm.xml" match="@EXCEPTION_SORTER_CLASS@" replace="${db.exception.sorter.class.oracle}" flags="g" />
	  </then>
	 </elseif>
	 <else>
	    <replaceregexp file="${artifacts.dir}/{$module_name}-ds-csm.xml" match="@DRIVER_CLASS@" replace="${db.jdbcRuntimeDriver.mysql}" flags="g" />
		<replaceregexp file="${artifacts.dir}/{$module_name}-ds-csm.xml" match="@EXCEPTION_SORTER_CLASS@" replace="${db.exception.sorter.class.mysql}" flags="g" />
	 </else>
	</if>
</target>
	<!-- Configures App Data Source -->
	<target name="configure.data.source" depends="configure.database.type.asMySQL, configure.database.type.asOracle" description="Configures Data Source for mySQL or Oracle">
		<delete file="${artifacts.dir}/${module_name}-ds.xml" />
		<copy file="conf/ds.xml.template" tofile="${artifacts.dir}/${module_name}-ds.xml">
		<filterset begintoken="@" endtoken="@">
				  	<filter token="DB_JNDI_CONNECTION" value="${cagwas.jndi.connection}"/>
				  	<filter token="DB_DIALECT" value="${DB_DIALECT}"/>
					<filter token="DB_CONNECTION_URL" value="${cagwas.urlDbalias}"/>
					<filter token="DB_USERNAME" value="${cagwas.databaseUser}"/>
					<filter token="DB_PASSWORD" value="${cagwas.databasePassword}"/>
					<filter token="DB_DRIVER_CLASS" value="${DB_DRIVER_CLASS}"/>
					<filter token="DB_EXCEPTION_SORTER_CLASS" value="${DB_EXCEPTION_SORTER_CLASS}"/>
				  </filterset>
		</copy>
	</target>
    <target name="-prop-check" unless="check.props" description="Verifies the presence of all required properties.">
        <fail>Missing one or more properties, see template.build.properties for a complete list.</fail>
    </target>

    <target name="-init-check" if="check.props" description="Notify the user that all properties are present.">
        <echo>All properties are present.</echo>
    </target>

    <target name="init" depends="-prop-check,-init-check" description="The default target which only validates the presence of the script properties.">
        <!-- <fail>This build script must be run with the name of the desired target: build-all, build-product, clean, deploy, javadoc, package-download, test.</fail> -->
    </target>
</project>
